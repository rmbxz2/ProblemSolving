notes about design patterns

---(1)--- 

   -(long)  (factory ,builder)  

           class  Router     ----|> ( DifferentInterface / abstract )
  method router(InterFace go) ----> DifferentInterface


---(2)---

   -for loop (decorator,chain_of_responsibility)

            class  Router     ----|> ( SameInterface / abstract )
  method router(InterFace go) ----> SameInterface
  
---(3)---

     -semi Router  (adapter, builder)

               class  Router    ----|> ( DifferentInterface / abstract )
  method router(subInterface go) ----> SubInterface


---(4)---
  
   -(composite)for loop + collections of subInterface
      
      Branch --|> RootA
      public void add(RootA root){children.add(root);} 
   
---(5)---   

   -one way short (strategy ,observer)  

        abstract Router <|---- class 
 method router(Goif go)  ----> interface
 
___________________________ok_________________________________
note :- i will try to collect notes about relationships between class and object of patterns


Q1: How can i track class diagram
	<|.. implements 
	<|-- extend
	<--  association

    (1) <|---(2) left to right 
 	(1) <|...(2) left to right
 	(2) <----(1) right to left

Q2: what is the router ?
private Router router ;
public  Router(Router router){
 this.router =router
}

Q2: what is { } means ? 
         router.

Q3: what is means of A(new B) ?   if we have router in class B  //in A not B
              A.router --->B

Q4: what is means of  A(new B(new C(new D))) ?  if wer have router in ABCD classes
                      A --> B --> C --> D 

Q5: what is means of  computer=new HD(new Monitor(new Mouse(computer))))? if we have routesssss	
                                                  1-  Mouse-->computer
                                        2-Monitor---->Mouse
                                 3-HD---->Monitor
                     4-computer--->HD
          or like circle
                     computer-->HD-->Monitor-->Mouse-->computer;  	
                                               
                                                

Q5: what is means of  ( if we have router in class B)
 class  A {
    new B (this)?
}   

means   A<--B  or   refer to me please.
                         











1-adapter pattern

	--class Diagram--
	FullNameIF <|.. FullName 
	FullNameIF <|..{Adapter}--> SeperatedName ..|> SeperatedNameIF

	--routing--
	Adapter.convertFullToSeperatedName(String name);

    --building Objects--
                                                                        ,------------------.
,------------------------.  ,------------------.   ,----------------.   |SeperatedName     |
|FullName                |  |MainAdapter       |   |Adapter         |   |------------------|
|------------------------|  |------------------|   |----------------|   |firstName="ahmad";|
|name ="ahmad ali omar" ;|<-|fullName= FullName|-->|sp=SeperatedName|-->|secondName"ali";  |
|------------------------|  |adapter =Adapter  |   |----------------|   |thirdName="omar"; |
`------------------------'  |------------------|   `----------------'   |------------------|









2-builder pattern

	--Class Diagram--
    {Director} --> BuilderIF <|..Builder--> CustomerIF <|.. Customer

    ---building Objects---    

    {Director} --> Builder--> Customer


    --routing--
    Director(BuilderIF builder){this.builder =builder } 
	Director.construct(){ builder.buildCustomer() }
                              builder.buildCustomer(){CustomerIF =new Customer()} 
                                                                 Customer(){print "customer build");
    
    
    Builder.getCustomer(){return this.customer}  
	Customer.action(){print "customer action done"}
	
	
	
	
	
	
	
3-chain of responsibility
   ---Class Diagram---
	HelpIF <|..{Teacher}--> HelpIF <|..{Manager}--> HelpIF <|..{Minister}--> HelpIF <|..King
	
   ---building objects---
         Help help = new Teacher(new Manager (new Minister (new King())));
        
,----------------.   ,----------------.   ,-----------------.  ,-------------.   ,------.
|MainChain       |   |Teacher         |   |Manager          |  |Minister     |   |King  |
|----------------|   |----------------|   |-----------------|  |-------------|   |------|
|help = Teacher  |-->|help = Manager  |-->|help = Minister  |->|help = King  |-->|------|
|----------------|   |----------------|   |-----------------|  |-------------|   `------'
`----------------'   `----------------'   `-----------------'  `-------------'           


	--routing--
     Manager(HelpIF help){this.help=help}
    
    
    --start--
    HelpIF.getHelp(int constantHelp)         









4-command pattern
















5-composite pattern
  --class Diagram--
  RootA <|--{Branch}--> RootA <|--Leaf  
  
  
  --routing--
  Branch(String name){this.name = name;} --> RootA
  
  --start--
  Branch.add(RootA root){children.add(root);}
  Branch.display(){
  for (RootA root : children)
			root.display();
    } 
   

---building objects---

              ,-----------------------------------.                    
              |trunk                              |                    
              |-----------------------------------|                    
              |name="trunk"                       |                    
              |children=ArrayList{branch1,branch2}|                    
              |-----------------------------------|                    
              `-----------------------------------'                    
                      |                   |                              
                      |                   |                             
                      V                   V
,-------------------------------.  ,---------------------------.       
|branch1                        |  |branch2                    |       
|-------------------------------|  |---------------------------|       
|name="branch1"                 |  |name="branch2"             |       
|children=ArrayList{leaf1,leaf2}|  |children=ArrayList{branch4}|       
|-------------------------------|  |---------------------------|       
`-------------------------------'  `---------------------------'       
      |             |                           |                    
      |             |                           V
      V             V              ,---------------------------.       
,----------.   ,----------.        |branch4                    |       
|leaf1     |   |leaf2     |        |---------------------------|       
|----------|   |----------|        |name="branch4"             |       
|name=leaf1|   |name=leaf2|        |children=ArrayList{branch3}|       
|----------|   |----------|        |---------------------------|       
`----------'   `----------'        `---------------------------'       
                                                  |                    
                                                  V                     
                              ,-------------------------------------.  
                              |branch3                              |  
                              |-------------------------------------|  
                              |name="branch3"                       |  
                              |children=ArrayList{leaf4,leaf5,leaf6}|  
                              |-------------------------------------|  
                              `-------------------------------------'  
                                  |                |           |           
                                  V                V           V 
                             ,----------.   ,----------.   ,----------.
                             |leaf4     |   |leaf5     |   |leaf6     |
                             |----------|   |----------|   |----------|
                             |name=leaf4|   |name=leaf5|   |name=leaf6|
                             |----------|   |----------|   |----------|
                             `----------'   `----------'   `----------'











6-decorator pattern
    -- class Diagram --
	Computer <|-- DecoratorA <|-- {CD} --> computer
	
	Note: Computer + DecoratorA == interface 
	
	-- routing --
	CD(Computer computer){this.computer = computer}  
	
	-- start --
	Computer.description(){"computer"} <|-- DecoratorA.description(); <|-- CD.description("CD"); 

	--- building Objects ---
	computer = new CD(new HD)new Monitor(computer);
	computer  ---> CD---> HD --> Monitor--> XXX Computer
	

                           
                                computer
                                   |
                                   |
                                   V
 ,-----------------------------------------------------------------.   
 |hd                                                               |   
 |-----------------------------------------------------------------|   
 |computer=monitor                                                 |   
 |public String description( ){ return "HD"+monitor.description();}|   
 |-----------------------------------------------------------------|   
 `-----------------------------------------------------------------'   
                                   |                                   
                                   |
                                   V                                   
,--------------------------------------------------------------------. 
|monitor                                                             | 
|--------------------------------------------------------------------| 
|computer=mouse                                                      | 
|public String description( ){ return "Monitor"+mouse.description();}| 
|--------------------------------------------------------------------| 
`--------------------------------------------------------------------' 
                                   |                                   
                                   |
                                   V
,---------------------------------------------------------------------.
|mouse                                                                |
|---------------------------------------------------------------------|
|computer=computer                                                    |
|public String description( ){ return "mouse"+computer.description();}|
|---------------------------------------------------------------------|
`---------------------------------------------------------------------'
                                   |                                   
                                   |
                                   V                                   
         ,-------------------------------------------------.           
         |computer                                         |           
         |-------------------------------------------------|           
         |public String description( ){ return "computer";}|           
         |-------------------------------------------------|           
         `-------------------------------------------------'           




	

 	
7-abstract factory pattern

	--class Diagram--		
 			{Win}..|> FactoryIF --> ConnectionIF <|-- MysqlIF  <|..MysqlWin
 			{Win}..|> FactoryIF --> ConnectionIF <|-- OracleIF <|..OracleWin
 		  {Linux}..|> FactoryIF --> ConnectionIF <|-- MysqlIF  <|..MysqlLinux
 		  {Linux}..|> FactoryIF --> ConnectionIF <|-- OracleIF <|..OracleLinux

    --routing--

   		    Win.createMysql(){return new MySqlWin();} 			
		    Win.createOracle(){return new OracleWin();} 			
		  Linux.createMysql(){return new MySqlLinux();} 			
		  Linux.createOracle(){return new OracleLinux();} 			
		  
    --start--  
    	OracleWin.description(){"print oracle on win"}
    	
      ---building objects---
                    

                                                     ,---------------.                                                        
                                                     |Main           |                                                        
                                                     |---------------|                                                        
                                                     |Factory1= win  |                                                        
                                                     |Factory2= Linux|                                                        
                                                     |---------------|                                                        
                                                     `---------------'                                                        
                                                      |             |                                                           
                                                      V             V                                                           
                                  ,--------------------.           ,--------------------.                                     
                                  |Win                 |           |Linux               |                                     
                                  |--------------------|           |--------------------|                                     
                                  |Oracle = OracleWin()|           |Oracle = OracleLinux|                                     
                                  |MySql = MySqlWin()  |           |MySql = MySqlLinux  |                                     
                                  |--------------------|           |--------------------|                                     
                            _____ `--------------------'           `--------------------' ----------                                    
                            |                |                           |                         | 
                            V                V                           V                         V
,---------------------------.  ,--------------------------.   ,-----------------------------.   ,----------------------------.
|OracleWin                  |  |MySqlWin                  |   |OracleLinux                  |   |MySqlLinux                  |
|---------------------------|  |--------------------------|   |-----------------------------|   |----------------------------|
|description() ="Oracle Win"|  |description() ="MySql Win"|   |description() ="Oracle Linux"|   |description() ="MySql Linux"|
|---------------------------|  |--------------------------|   |-----------------------------|   |----------------------------|
`---------------------------'  `--------------------------'   `-----------------------------'   `----------------------------'










8- factory method

	--class Diagram--
	CreatorIF <|..{Creator1}..> Product1 <|..ProductIF
	CreatorIF <|..{Creator2}..> Product2 <|..ProductIF
	  
	   --routing--
      Creator1.factoryMethod(){return new Product1() or new Product2()}
      Creator2.factoryMethod(){return new Product3() or new Product4()}
      
      --start--
      Product.action(){print" product 1 done "};

      ---building objects--
      
                                           ,----------------------.                                           
                                           |Main                  |                                           
                                           |----------------------|                                           
                                           |CreatorIF1 = Creator1;|                                           
                         ------------------|CreatorIF2 = Creator2;|---------------                                           
                         |                 |CreatorIF3 = Creator3;|               |                            
                         |                 |----------------------|               |                            
                         |                 `----------------------'               |                            
                         |                             |                          |                            
                         V                             V                          V                            
            ,--------------------.          ,--------------------.         ,--------------------.             
            |Creator1            |          |Creator2            |         |Creator3            |             
            |--------------------|          |--------------------|         |--------------------|             
            |ProductIF = Product1|          |ProductIF = Product2|         |ProductIF = Product3|             
            |--------------------|          |--------------------|         |--------------------|             
            `--------------------'          `--------------------'         `--------------------'             
                     |                                 |                           |
					 V							       V                           V  
,---------------------------------.  ,---------------------------------.   ,---------------------------------.
|Product1                         |  |Product2                         |   |Product3                         |
|---------------------------------|  |---------------------------------|   |---------------------------------|
|action("product 1 action called")|  |action("product 2 action called")|   |action("product 3 action called")|
|---------------------------------|  |---------------------------------|   |---------------------------------|
`---------------------------------'  `---------------------------------'   `---------------------------------'




9-observer pattern
 
			--class diagram--
 			(observable)DBobserver..|> SubjectIF(QuackObservable) --> ObserverIF <|..client  
 			
 			--routing--
 			DBobserver.addObserver(ObserverIF) 				
 			DBobserver.removeObserver(ObserverIF) 				
 			
 			--start--
 			DBobserver.notifyObserver() 				
 			ObserverIF.update(String operation,String record);

            ---building objects---    

                                                               ,------------------.                                                               
                                                               |Main              |                                                               
                                                               |------------------|                                                               
                                                               |Subject=DBobserver|                                                               
                                                               |------------------|                                                               
                                                               `------------------'                                                               
                                                                         |                                                                        
                                                                         V                                                                       
                                                  ,-------------------------------------------.                                                   
                                                  |DBobserver                                 |                                                   
                                                  |-------------------------------------------|                                                   
                                                  |-ArrayList<Observer> {Client,Boss,Archiver}|                                                   
                                          ________|-------------------------------------------|__________                                                   
                                         |        `-------------------------------------------'          |                                         
                                         |                               |                               |
                                         V                               V                               V
,---------------------------------------------.  ,---------------------------------------------.   ,---------------------------------------------.
|                                   Client    |  |                     Boss                    |   |Archiver                                     |
|---------------------------------------------|  |---------------------------------------------|   |---------------------------------------------|
|+void update(String operation, String record)|  |+void update(String operation, String record)|   |+void update(String operation, String record)|
|---------------------------------------------|  |---------------------------------------------|   |---------------------------------------------|
`---------------------------------------------'  `---------------------------------------------'   `---------------------------------------------'










                
10-startegy pattern
 			--class diagram--
            Car --|> {Vehicle} --> GoAlgoIF <|..Driving 
            
            --routing--
            Vehicle.setGoAlgo(GoAlgoIF go){this.go=go}
            
            --start--
           this.GoAlgoIF.go()
            
            ---build objets--
            vehicle--> Car -->Driving





11-facade
    --class diagram--
	facade --> difficult 

















12-template      
    --class diagram--
	templateA <|-- Coffee












      
13-singleton
	// create one object at memory
	// Without volatile the code doesn't work correctly with multiple threads.
	
	//The volatile prevents memory writes from being re-ordered,
	// making it impossible for other threads to read uninitialized 
	//fields of your singleton through the singleton's pointer.
	
	// so volatile prevent other threads in memory , 
	// synchronized prevent other threads in HardDisk
	// example freezer and dishes ; first hide the dishes then close the freezer	
	private static volatile Singleton uniqueSingleton;
	private String name;

	private Singleton(String name) {
		this.name = name;
	}

	public static Singleton getSingleton(String name) {
		if (uniqueSingleton == null) {
			synchronized (Singleton.class) {
				if (uniqueSingleton == null) {
					uniqueSingleton = new Singleton(name);
				}
			}
		}
		return uniqueSingleton;
	}









14- proxy pattern
		
		--class diagram--
		CarIF<|..{Proxy}-->Car
		
		--routing--
		Proxy(){car=new Car()}
	
		--start--
		Proxy.drive(int age){car.drive()}

         --build objects---
         CarIF-->proxy-->Car











		
15- state pattern

			--class diagram--
            Switch --> StateIF <|.. State1  
            
            --routing--
            Switch.changeState(){switch (int x) state=new State1() or state=new State2()}
            
            --start--
            Switch.handle()


            --build objects---



                                           ,---------------.                                            
                                           |Main           |                                            
                                           |---------------|                                            
                                           |Switch = Switch|                                            
                                           |---------------|                                            
                                           `---------------'                                            
                                                    |                                                   
                                                    | 
                                                    V                                                 
                     ,-----------------------------------------------------------.                      
                     |Switch                                                     |                      
                     |-----------------------------------------------------------|                      
                     |-state=State1  2  3                                        |                      
                     |+void changeState(int x){ swith(x){case s1: state=state1 }}|                      
                     |-----------------------------------------------------------|                      
                     `-----------------------------------------------------------'                      
                         |                                               
                         |"only one of three state"
                         V                                               
,-------------------------------.  ,-------------------------------.   ,-------------------------------.
|State1                         |  |State2                         |   |State3                         |
|-------------------------------|  |-------------------------------|   |-------------------------------|
|void handle(){print " state 1"}|  |void handle(){print " state 2"}|   |void handle(){print " state 3"}|
|-------------------------------|  |-------------------------------|   |-------------------------------|
`-------------------------------'  `-------------------------------'   `-------------------------------'






		
========================================================================================================
========================================================================================================

16- pattern of patterns	(combining pattern)

code {
class MallardDuck{
observable=new Observable(this);
}}

look at below  image :
 
         _redhead___       _Observable______
        |          |      |                 |
this--> |observable|----->| quackobservable ---->this  
redhead |__________|      |_________________|


         _redhead___       _Observable______
        |          |      |                 |
this--> |observable|<-----| quackobservable |  
redhead |__________|      |_________________|


Redhead redhead = new Readhead()
(readhead)
   
 equals   (this)


------------------------------------- 

  DuckSimulator 
  
  1- Quackable --> CountingDcukFactory --> AbstractDuckFactory --> createReadheadDuck -->ReadheadDuck<-->Observable-->QuackObservable--> QuackCounter-->
  Flock.add(1); 
  
  Quackologist -->Observer-->
  2-flockOfDucks.registerObserver--> observer--> QuackCounter--> ReadheadDuck--> registerobserver-->
