/*
	A non-empty zero-indexed array A consisting of N numbers is given. The array is sorted in non-decreasing order. The absolute distinct count of this array is the number of distinct absolute values among the elements of the array.
	For example, consider array A such that:
	  A[0] = -5    
	  A[1] = -3    
	  A[2] = -1
	  A[3] =  0    
	  A[4] =  3    
	  A[5] =  6
	The absolute distinct count of this array is 5, because there are 5 distinct absolute values among the elements of this array, namely 0, 1, 3, 5 and 6.
	Write a function:
	class Solution { public int solution(int[] A); }
	that, given a non-empty zero-indexed array A consisting of N numbers, returns absolute distinct count of array A.
	For example, given array A such that:
	  A[0] = -5    
	  A[1] = -3    
	  A[2] = -1
	  A[3] =  0    
	  A[4] =  3    
	  A[5] =  6
	the function should return 5, as explained above.
	Assume that:
	N is an integer within the range [1..100,000];
	each element of array A is an integer within the range [−2,147,483,648..2,147,483,647];
	array A is sorted in non-decreasing order.
	Complexity:
	expected worst-case time complexity is O(N);
	expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//SCORE: 100/100 (both solutions)
package caterpillar;

import java.util.Arrays;
import java.util.stream.IntStream;

public class AbsDistinct {
	
	public static void main(String[] args) {
		int[] A = new int[]{-5,-3,-1,0,3,6};
		System.out.println(solution(A));
	}
	
	//using Java 8
	public static int solution(int[] A) {
		return (int)IntStream.of(A).map(i->Math.abs(i)).distinct().count();
	}
	
	public static int solution1(int[] A) {
		int dupls = 0;
		for (int i = 0; i < A.length; i++) {
			if(A[i]<0)
				A[i] = -A[i];
		}
		Arrays.sort(A);
		for (int i = 1; i < A.length; i++) {
			if(A[i] == A[i-1])
				dupls++;
		}
		return A.length-dupls;
	}


}
/*
	A string S consisting of N characters is considered to be properly nested if any of the following conditions is true:
	S is empty;
	S has the form "(U)" or "[U]" or "{U}" where U is a properly nested string;
	S has the form "VW" where V and W are properly nested strings.
	For example, the string "{[()()]}" is properly nested but "([)()]" is not.
	Write a function:
	class Solution { public int solution(String S); }
	that, given a string S consisting of N characters, returns 1 if S is properly nested and 0 otherwise.
	For example, given S = "{[()()]}", the function should return 1 and given S = "([)()]", the function should return 0, as explained above.
	Assume that:
	N is an integer within the range [0..200,000];
	string S consists only of the following characters: "(", "{", "[", "]", "}" and/or ")".
	Complexity:
	expected worst-case time complexity is O(N);
	expected worst-case space complexity is O(N) (not counting the storage required for input arguments).
 */

//SCORE:100/100
package stackandqueue;

import java.util.Stack;

public class Brackets {
	public static void main (String[] args) {
		String S= "{[()()]}";
		System.out.println(solution(S));
	}
	
	public static int solution(String S) {
		Stack<Character> chars = new Stack<Character>();
		for (int i = 0; i < S.length(); i++) {
			if (chars.size() == 0)
				chars.push(S.charAt(i));
			else {
				if (isMatch(chars.peek(), S.charAt(i)))
					chars.pop();
				else 
					chars.push(S.charAt(i));
			}
		}
		return chars.size()==0?1:0;
	}
	
	private static boolean isMatch(char a, char b) {
		switch(a) {
			case '{': return b == '}';
			case '(': return b == ')';
			case '[': return b == ']';
			default: return false;
		}
	}
}
/*
	Two positive integers N and M are given. Integer N represents the number of chocolates arranged in a circle, numbered from 0 to N − 1.
	You start to eat the chocolates. After eating a chocolate you leave only a wrapper.
	You begin with eating chocolate number 0. Then you omit the next M − 1 chocolates or wrappers on the circle, and eat the following one.
	More precisely, if you ate chocolate number X, then you will next eat the chocolate with number (X + M) modulo N (remainder of division).
	You stop eating when you encounter an empty wrapper.
	For example, given integers N = 10 and M = 4. You will eat the following chocolates: 0, 4, 8, 2, 6.
	The goal is to count the number of chocolates that you will eat, following the above rules.
	Write a function:
	class Solution { public int solution(int N, int M); }
	that, given two positive integers N and M, returns the number of chocolates that you will eat.
	For example, given integers N = 10 and M = 4. the function should return 5, as explained above.
	Assume that:
	N and M are integers within the range [1..1,000,000,000].
	Complexity:
	expected worst-case time complexity is O(log(N+M));
	expected worst-case space complexity is O(1).
 */

//SCORE: 100/100
package euclideanalgorithm;

public class ChocoladeByNumbers {

	public static void main(String[] args) {
		int N =12;
		int M =3;
		int res=1;
		System.out.println(solution(N,M,res));
	}

	private static int solution(int N, int M, int res) {	
		return N/greatestCommonDivisor(N,M,1);
	}
	
	private static int greatestCommonDivisor(int a, int b, int res) {
		if (a==b)
			return res*a;
		else if (a%2==0 && b%2==0)
			return greatestCommonDivisor (a/2, b/2, res*2);
		else if (a%2==0)
			return greatestCommonDivisor (a/2, b, res);
		else if (b%2==0)
			return greatestCommonDivisor (a, b/2, res);
		else if (a>b)
			return greatestCommonDivisor (a - b, b, res);
		else 
			return greatestCommonDivisor (a, b - a, res);
	}
}
/*
	A prime is a positive integer X that has exactly two distinct divisors: 1 and X. The first few prime integers are 2, 3, 5, 7, 11 and 13.
	A prime D is called a prime divisor of a positive integer P if there exists a positive integer K such that D * K = P. For example, 2 and 5 are prime divisors of 20.
	You are given two positive integers N and M. The goal is to check whether the sets of prime divisors of integers N and M are exactly the same.
	For example, given:
	N = 15 and M = 75, the prime divisors are the same: {3, 5};
	N = 10 and M = 30, the prime divisors aren't the same: {2, 5} is not equal to {2, 3, 5};
	N = 9 and M = 5, the prime divisors aren't the same: {3} is not equal to {5}.
	Write a function:
	class Solution { public int solution(int[] A, int[] B); }
	that, given two non-empty zero-indexed arrays A and B of Z integers, returns the number of positions K for which the prime divisors of A[K] and B[K] are exactly the same.
	For example, given:
	    A[0] = 15   B[0] = 75
	    A[1] = 10   B[1] = 30
	    A[2] = 3    B[2] = 5
	the function should return 1, because only one pair (15, 75) has the same set of prime divisors.
	Assume that:
	Z is an integer within the range [1..6,000];
	each element of arrays A, B is an integer within the range [1..2147483647].
	Complexity:
	expected worst-case time complexity is O(Z*log(max(A)+max(B))2);
	expected worst-case space complexity is O(1), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//SCORE: 100/100
package euclideanalgorithm;

public class CommonPrimeDivisors {

	public static void main(String[] args) {
		int[] A = new int[]{15,10,3};
		int[] B = new int[]{75,30,5};
		System.out.println(solution(A,B));
		
	}
	
	private static int solution(int[] A, int[] B) {
		int res=0;
		for (int i = 0; i < A.length; i++) {
			int x=A[i];
			int y=B[i];
			int gcd = gcd(x, y, 1);
			int gcdTmp=0;
			while(x!=1) {
				gcdTmp = gcd(x, gcd, 1);
				if(gcdTmp==1)
					break;
				x /= gcdTmp;
			}
			if (x!=1)
				continue;
			
			while(y!=1) {
				gcdTmp = gcd(y,gcd,1);
				if (gcdTmp==1)
					break;
				y /= gcdTmp;
			}
			if (y!=1)
				continue;
			res++;
		}
		return res;
	}
	
	private static int gcd(int a, int b, int res) {
		if (a==b)
			return res*a;
		else if (a%2==0 && b%2==0)
			return gcd (a/2, b/2, res*2);
		else if (a%2==0)
			return gcd (a/2, b, res);
		else if (b%2==0)
			return gcd (a, b/2, res);
		else if (a>b)
			return gcd (a - b, b, res);
		else 
			return gcd (a, b - a, res);		
	}
}
/*
	An integer M and a non-empty zero-indexed array A consisting of N non-negative integers are given. All integers in array A are less than or equal to M.
	A pair of integers (P, Q), such that 0 ≤ P ≤ Q < N, is called a slice of array A. The slice consists of the elements A[P], A[P + 1], ..., A[Q]. A distinct slice is a slice consisting of only unique numbers. That is, no individual number occurs more than once in the slice.
	For example, consider integer M = 6 and array A such that:
	    A[0] = 3
	    A[1] = 4
	    A[2] = 5
	    A[3] = 5
	    A[4] = 2
	There are exactly nine distinct slices: (0, 0), (0, 1), (0, 2), (1, 1), (1, 2), (2, 2), (3, 3), (3, 4) and (4, 4).
	The goal is to calculate the number of distinct slices.
	Write a function:
	class Solution { public int solution(int M, int[] A); }
	that, given an integer M and a non-empty zero-indexed array A consisting of N integers, returns the number of distinct slices.
	If the number of distinct slices is greater than 1,000,000,000, the function should return 1,000,000,000.
	For example, given integer M = 6 and array A such that:
	    A[0] = 3
	    A[1] = 4
	    A[2] = 5
	    A[3] = 5
	    A[4] = 2
	the function should return 9, as explained above.
	Assume that:
	N is an integer within the range [1..100,000];
	M is an integer within the range [0..100,000];
	each element of array A is an integer within the range [0..M].
	Complexity:
	expected worst-case time complexity is O(N);
	expected worst-case space complexity is O(M), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//SCORE: 100/100
package caterpillar;

public class CountDistinctSlices {
	
	public static void main(String[] args) {
		int[] A = new int[]{3, 4, 5, 5, 2};
		int M = 6;
		System.out.println(solution(A, M));
	}
	
	public static int solution(int[] A, int M) {
		return caterpillarMethod(A, M);

	}
	
	public static int caterpillarMethod(int[] A, int M) {	
		int res = 0; 
		int front = 0; 
		int back =0;
		boolean[] seen = new boolean [M+1];
		while(front<A.length && back<A.length) {
			while(front<A.length && !seen[A[front]]) {
				res += front - back + 1;
				seen[A[front]] = true;
				front++;
			}
			while(front<A.length && back<A.length && A[back] != A[front]) {
				seen[A[back]] = false;
				back++;
			}
			seen[A[back]] = false;
			back++;
		}
		return Math.min(res, 1000000000);
	}
}
/*
	Write a function:
	class Solution { public int solution(int A, int B, int K); }
	that, given three integers A, B and K, returns the number of integers within the range [A..B] that are divisible by K, i.e.:
	{ i : A ≤ i ≤ B, i mod K = 0 }
	For example, for A = 6, B = 11 and K = 2, your function should return 3, because there are three numbers divisible by 2 within the range [6..11], namely 6, 8 and 10.
	Assume that:
	A and B are integers within the range [0..2,000,000,000];
	K is an integer within the range [1..2,000,000,000];
	A ≤ B.
	Complexity:
	expected worst-case time complexity is O(1);
	expected worst-case space complexity is O(1).
 */

//SCORE: 100/100
package prefixsums;

public class CountDiv {
	public static void main(String[] args) {
		int A = 6;
		int B = 11;
		int K = 2;
		System.out.println(solution(A,B,K));
	}
	public static int solution(int A, int B, int K) {
		if (A%K==0)
			return B/K - A/K + 1;
		return B/K - A/K;
	}
}
/*
	A positive integer D is a factor of a positive integer N if there exists an integer M such that N = D * M.
	For example, 6 is a factor of 24, because M = 4 satisfies the above condition (24 = 6 * 4).
	Write a function:
	class Solution { public int solution(int N); }
	that, given a positive integer N, returns the number of its factors.
	For example, given N = 24, the function should return 8, because 24 has 8 factors, namely 1, 2, 3, 4, 6, 8, 12, 24. There are no other factors of 24.
	Assume that:
	N is an integer within the range [1..2,147,483,647].
	Complexity:
	expected worst-case time complexity is O(sqrt(N));
	expected worst-case space complexity is O(1).
 */

//Score: 100/100
package primeandcompositenumbers;

public class CountFactors {

	public static void main(String[] args) {
		System.out.println(solution(24));
	}
	
	public static int solution(int N) {
		int res = 0;
		for (int i = 1; (long)i*i <=N ; i++) {
			if (i*i == N)
				return ++res;
			else if(N%i == 0)
				res+=2;
		}
		return res;
	}
}
/*
	You are given a non-empty zero-indexed array A consisting of N integers.
	For each number A[i] such that 0 ≤ i < N, we want to count the number of elements of the array that are not the divisors of A[i]. We say that these elements are non-divisors.
	For example, consider integer N = 5 and array A such that:
	    A[0] = 3
	    A[1] = 1
	    A[2] = 2
	    A[3] = 3
	    A[4] = 6
	For the following elements:
	A[0] = 3, the non-divisors are: 2, 6,
	A[1] = 1, the non-divisors are: 3, 2, 3, 6,
	A[2] = 2, the non-divisors are: 3, 3, 6,
	A[3] = 3, the non-divisors are: 2, 6,
	A[6] = 6, there aren't any non-divisors.
	Write a function:
	class Solution { public int[] solution(int[] A); }
	that, given a non-empty zero-indexed array A consisting of N integers, returns a sequence of integers representing the amount of non-divisors.
	The sequence should be returned as:
	a structure Results (in C), or
	a vector of integers (in C++), or
	a record Results (in Pascal), or
	an array of integers (in any other programming language).
	For example, given:
	    A[0] = 3
	    A[1] = 1
	    A[2] = 2
	    A[3] = 3
	    A[4] = 6
	the function should return [2, 4, 3, 2, 0], as explained above.
	Assume that:
	N is an integer within the range [1..50,000];
	each element of array A is an integer within the range [1..2 * N].
	Complexity:
	expected worst-case time complexity is O(N*log(N));
	expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//SCORE: 100/100
package sieveoferastothenes;

import java.util.Arrays;

public class CountNonDivisible {
	
	public static void main (String[] args) {
		int[] A = new int[] {3,1,2,3,6};
		System.out.println(Arrays.toString(solution(A)));
	}
	
	public static int[] solution(int[] A) {
	    int[][] D = new int[2*A.length + 1][2];
	    int[] res = new int[A.length];
	    for (int i = 0; i < A.length; i++) {
			D[A[i]][0]++;
			D[A[i]][1] = -1;
		}
	    for (int i = 0; i < A.length; i++) {
	    	if(D[A[i]][1]==-1) {
	    		D[A[i]][1]=0;
	    		for (int j = 1; j*j <= A[i]; j++) {
					if(A[i] % j == 0) {
						D[A[i]][1]+= D[j][0];
						if (A[i]/j != j)
							D[A[i]][1]+= D[A[i]/j][0];
					}
					
				}
			}
		}
	    for (int i = 0; i < A.length; i++) {
			res[i] = A.length - D[A[i]][1]; 
		}
	    return res;
	} 	
}
/*
	A prime is a positive integer X that has exactly two distinct divisors: 1 and X. The first few prime integers are 2, 3, 5, 7, 11 and 13.
	A semiprime is a natural number that is the product of two (not necessarily distinct) prime numbers. The first few semiprimes are 4, 6, 9, 10, 14, 15, 21, 22, 25, 26.
	You are given two non-empty zero-indexed arrays P and Q, each consisting of M integers. These arrays represent queries about the number of semiprimes within specified ranges.
	Query K requires you to find the number of semiprimes within the range (P[K], Q[K]), where 1 ≤ P[K] ≤ Q[K] ≤ N.
	For example, consider an integer N = 26 and arrays P, Q such that:
	    P[0] = 1    Q[0] = 26
	    P[1] = 4    Q[1] = 10
	    P[2] = 16   Q[2] = 20
	The number of semiprimes within each of these ranges is as follows:
	(1, 26) is 10,
	(4, 10) is 4,
	(16, 20) is 0.
	Write a function:
	class Solution { public int[] solution(int N, int[] P, int[] Q); }
	that, given an integer N and two non-empty zero-indexed arrays P and Q consisting of M integers, returns an array consisting of M elements specifying the consecutive answers to all the queries.
	For example, given an integer N = 26 and arrays P, Q such that:
	    P[0] = 1    Q[0] = 26
	    P[1] = 4    Q[1] = 10
	    P[2] = 16   Q[2] = 20
	the function should return the values [10, 4, 0], as explained above.
	Assume that:
	N is an integer within the range [1..50,000];
	M is an integer within the range [1..30,000];
	each element of arrays P, Q is an integer within the range [1..N];
	P[i] ≤ Q[i].
	Complexity:
	expected worst-case time complexity is O(N*log(log(N))+M);
	expected worst-case space complexity is O(N+M), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//Score: 100/100
package sieveoferastothenes;

import java.util.Arrays;

public class CountSemiprimes {
	
	public static void main (String[] args) {
		int[] A = new int[] {1,4,16};
		int[] B = new int[]{26,10,20};
		int N = 26;
		System.out.println(Arrays.toString(solution(A,B,N)));
		
	}
	
	public static int[] solution(int[] A, int[] B, int N) {
		int[] factArray = factorizationArray(N);
		int[] semiPrimes = new int[factArray.length];
		for (int i = 0; i < semiPrimes.length; i++) {
			if (factArray[i] != 0 && factArray[i/factArray[i]] == 0)
				semiPrimes[i] = 1;
		}
		int[] semiPrimesPreSum = prefixSum(semiPrimes);
		int[] res = new int[A.length];
		for (int i = 0; i < B.length; i++) {
			res[i] = semiPrimesPreSum[B[i]] - semiPrimesPreSum[A[i]-1];
		}
		return res;
	}

	//preparing array for factorization (array with primes)
	public static int[] factorizationArray(int n) {
		int[] F = new int[n+1];
		for (int i = 2; i*i <= n; i++) {
			if (F[i] == 0) {
				for (int k = i*i; k<=n; k+=i) {
					if (F[k] == 0)
						F[k] = i;
				}
			}
		}
		return F;
	}
	public static int[] prefixSum(int[] A) {
		int[] prefSum = new int[A.length];
		for (int i = 0; i < A.length; i++) {
			if (i==0)
				prefSum[i] =  A[i];
			else 
				prefSum[i] = prefSum[i-1] + A[i];
		}
		return prefSum;
	}
}
/*
	A zero-indexed array A consisting of N integers is given. A triplet (P, Q, R) is triangular if it is possible to build a triangle with sides of lengths A[P], A[Q] and A[R]. In other words, triplet (P, Q, R) is triangular if 0 ≤ P < Q < R < N and:
	A[P] + A[Q] > A[R],
	A[Q] + A[R] > A[P],
	A[R] + A[P] > A[Q].
	For example, consider array A such that:
	  A[0] = 10    A[1] = 2    A[2] = 5
	  A[3] = 1     A[4] = 8    A[5] = 12
	There are four triangular triplets that can be constructed from elements of this array, namely (0, 2, 4), (0, 2, 5), (0, 4, 5), and (2, 4, 5).
	Write a function:
	class Solution { public int solution(int[] A); }
	that, given a zero-indexed array A consisting of N integers, returns the number of triangular triplets in this array.
	For example, given array A such that:
	  A[0] = 10    A[1] = 2    A[2] = 5
	  A[3] = 1     A[4] = 8    A[5] = 12
	the function should return 4, as explained above.
	Assume that:
	N is an integer within the range [0..1,000];
	each element of array A is an integer within the range [1..1,000,000,000].
	Complexity:
	expected worst-case time complexity is O(N2);
	expected worst-case space complexity is O(1), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//SCORE: 100/100
package caterpillar;

import java.util.Arrays;

public class CountTriangles {
	
	public static void main(String[] args) {
		int[] A = new int[] {10, 2, 5, 1, 8, 12};
		System.out.println(solution(A));
	}
	
	public static int solution(int[] A) {
		return caterpillarMethod(A);
	}
	
	public static int caterpillarMethod(int[] A) {
		int N = A.length;
		int res=0;
		if (N < 3)
			return 0;
		int front;
		Arrays.sort(A);
		for (int i = 0; i < N-2; i++) {
			front = i+2;
			for (int j = i+1; j < N-1; j++) {
				while(front < N && A[i] + A[j] > A[front]){
					front++;
				}
				res+=front-j-1;
			}
		}
		return res;
	}
}
/*
	Write a function
	class Solution { public int solution(int[] A); }
	that, given a zero-indexed array A consisting of N integers, returns the number of distinct values in array A.
	Assume that:
	N is an integer within the range [0..100,000];
	each element of array A is an integer within the range [−1,000,000..1,000,000].
	For example, given array A consisting of six elements such that:
	A[0] = 2    A[1] = 1    A[2] = 1
	A[3] = 2    A[4] = 3    A[5] = 1
	the function should return 3, because there are 3 distinct values appearing in array A, namely 1, 2 and 3.
	Complexity:
	expected worst-case time complexity is O(N*log(N));
	expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//SCORE:100/100
package sorting;

import java.util.Arrays;

public class Distinct {
	public static void main (String[] args) {
		int[] A = new int[] {2,1,1,2,3,1};
		System.out.println(solution(A));
	}
	
	public static int solution(int[] A) {
		Arrays.sort(A);
		int dupl=0;
		for (int i = 1; i < A.length; i++) {
			if (A[i] == A[i-1])
				dupl++;
		}
		return A.length - dupl;
	}
}
/*
	A zero-indexed array A consisting of N integers is given. The dominator of array A is the value that occurs in more than half of the elements of A.
	For example, consider array A such that
	A[0] = 3    A[1] = 4    A[2] =  3
	A[3] = 2    A[4] = 3    A[5] = -1
	A[6] = 3    A[7] = 3
	The dominator of A is 3 because it occurs in 5 out of 8 elements of A (namely in those with indices 0, 2, 4, 6 and 7) and 5 is more than a half of 8.
	Write a function
	class Solution { public int solution(int[] A); }
	that, given a zero-indexed array A consisting of N integers, returns index of any element of array A in which the dominator of A occurs. The function should return −1 if array A does not have a dominator.
	Assume that:
	N is an integer within the range [0..100,000];
	each element of array A is an integer within the range [−2,147,483,648..2,147,483,647].
	For example, given array A such that
	A[0] = 3    A[1] = 4    A[2] =  3
	A[3] = 2    A[4] = 3    A[5] = -1
	A[6] = 3    A[7] = 3
	the function may return 0, 2, 4, 6 or 7, as explained above.
	Complexity:
	expected worst-case time complexity is O(N);
	expected worst-case space complexity is O(1), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//SCORE: 100/100
package leader;

import java.util.Stack;

public class Dominator {
	public static void main (String[] args) {
		int[] A = new int[]{3, 4, 3, 2, 3, -1, 3, 3};
		System.out.println(solution(A));
		
	}
	
	public static int solution(int[] A) {
		Stack<Integer> stack = new Stack<Integer>();
		for (int i = 0; i < A.length; i++) {
			if (stack.isEmpty()) {
				stack.push(A[i]);
				continue;
			}
			if (stack.peek() == A[i])
				stack.push(A[i]);
			else
				stack.pop();
		}
		if (stack.isEmpty())
			return -1;
		int domCandidate = stack.peek();
		int occurances = 0;
		int randomIndex=-1;
		for (int i = 0; i < A.length; i++) {
			if(A[i] == domCandidate) {
				occurances++;
				randomIndex = i;
			}
		}
		
		return occurances>A.length/2?randomIndex:-1;
	}
}
/*
	A non-empty zero-indexed array A consisting of N integers is given.
	The leader of this array is the value that occurs in more than half of the elements of A.
	An equi leader is an index S such that 0 ≤ S < N − 1 and two sequences A[0], A[1], ..., A[S] and A[S + 1], A[S + 2], ..., A[N − 1] have leaders of the same value.
	For example, given array A such that:
	    A[0] = 4
	    A[1] = 3
	    A[2] = 4
	    A[3] = 4
	    A[4] = 4
	    A[5] = 2
	we can find two equi leaders:
	0, because sequences: (4) and (3, 4, 4, 4, 2) have the same leader, whose value is 4.
	2, because sequences: (4, 3, 4) and (4, 4, 2) have the same leader, whose value is 4.
	The goal is to count the number of equi leaders. Write a function:
	class Solution { public int solution(int[] A); }
	that, given a non-empty zero-indexed array A consisting of N integers, returns the number of equi leaders.
	For example, given:
	    A[0] = 4
	    A[1] = 3
	    A[2] = 4
	    A[3] = 4
	    A[4] = 4
	    A[5] = 2
	the function should return 2, as explained above.
	Assume that:
	N is an integer within the range [1..100,000];
	each element of array A is an integer within the range [−1,000,000,000..1,000,000,000].
	Complexity:
	expected worst-case time complexity is O(N);
	expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//SCORE: 100/100
package leader;

import java.util.Stack;

public class EquiLeader {
	public static void main (String[] args) {
		int[] A = new int[]{4,3,4,4,4,2};
		System.out.println(solution(A));
		
	}
	public static int solution(int[] A) {
		
		//check if it is dominator at all
		Stack<Integer> stack = new Stack<Integer>();
		for (int i = 0; i < A.length; i++) {
			if (stack.isEmpty()) {
				stack.push(A[i]);
				continue;
			}
			if (stack.peek() == A[i])
				stack.push(A[i]);
			else
				stack.pop();
		}
		if (stack.isEmpty())
			return 0; //there's no dominator
		int dominator = stack.peek();
		int domOccurances = 0;
		for (int i = 0; i < A.length; i++) {
			if(A[i] == dominator)
				domOccurances++;
		}
		if (domOccurances <= A.length/2)
			return 0;//not dominator
		int nonDomOccurances = A.length - domOccurances;
		stack.clear();
		int dom=0;
		int nonDom=0;
		int equiLeaders=0;
		for (int i = 0; i < A.length; i++) {
			if (A[i] == dominator)
				dom++;
			else 
				nonDom++;
			if (dom>nonDom && (domOccurances - dom) > (nonDomOccurances-nonDom))
				equiLeaders++;	
		}
		return equiLeaders;
	}
}
/*
	The Fibonacci sequence is defined using the following recursive formula:
	    F(0) = 0
	    F(1) = 1
	    F(M) = F(M - 1) + F(M - 2) if M >= 2
	A small frog wants to get to the other side of a river. The frog is initially located at one bank of the river (position −1) and wants to get to the other bank (position N). The frog can jump over any distance F(K), where F(K) is the K-th Fibonacci number. Luckily, there are many leaves on the river, and the frog can jump between the leaves, but only in the direction of the bank at position N.
	The leaves on the river are represented in a zero-indexed array A consisting of N integers. Consecutive elements of array A represent consecutive positions from 0 to N − 1 on the river. Array A contains only 0s and/or 1s:
	0 represents a position without a leaf;
	1 represents a position containing a leaf.
	The goal is to count the minimum number of jumps in which the frog can get to the other side of the river (from position −1 to position N). The frog can jump between positions −1 and N (the banks of the river) and every position containing a leaf.
	For example, consider array A such that:
	    A[0] = 0
	    A[1] = 0
	    A[2] = 0
	    A[3] = 1
	    A[4] = 1
	    A[5] = 0
	    A[6] = 1
	    A[7] = 0
	    A[8] = 0
	    A[9] = 0
	    A[10] = 0
	The frog can make three jumps of length F(5) = 5, F(3) = 2 and F(5) = 5.
	Write a function:
	class Solution { public int solution(int[] A); }
	that, given a zero-indexed array A consisting of N integers, returns the minimum number of jumps by which the frog can get to the other side of the river. If the frog cannot reach the other side of the river, the function should return −1.
	For example, given:
	    A[0] = 0
	    A[1] = 0
	    A[2] = 0
	    A[3] = 1
	    A[4] = 1
	    A[5] = 0
	    A[6] = 1
	    A[7] = 0
	    A[8] = 0
	    A[9] = 0
	    A[10] = 0
	the function should return 3, as explained above.
	Assume that:
	N is an integer within the range [0..100,000];
	each element of array A is an integer that can have one of the following values: 0, 1.
	Complexity:
	expected worst-case time complexity is O(N*log(N));
	expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//SCORE: 100/100
package fibonaccinumbers;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

public class FibFrog {
	int number = 0;
	public static void main(String[] args) {
		int[] A = new int[]{0,0,0,1,1,0,1,0,0,0,0};
		System.out.println(solution(A));
	}
	
	public static int solution(int[] A) {
		List<Integer> fibs = getFibonaciUpTo(A.length+1);
		boolean[] visited = new boolean[A.length];
		Stack<Jump> stack= new Stack<Jump>();
		stack.push(new Jump(-1,0));
		while(!stack.isEmpty()) {
			Jump currJump = stack.firstElement();
			stack.remove(0);
			int i = 0;
			while(currJump.pos + fibs.get(i)<= A.length) {
				if (currJump.pos + fibs.get(i) == A.length)
					return currJump.jumps + 1;
				if(A[fibs.get(i)+currJump.pos] == 1 && !visited[currJump.pos + fibs.get(i)]) {
					stack.push(new Jump(fibs.get(i)+currJump.pos, currJump.jumps+1));
					visited[fibs.get(i)+currJump.pos] = true;
				}
				i++;
			}
		}
		return -1;
	}
	
    public static List<Integer> getFibonaciUpTo(int n) {
        List<Integer> fibs = new ArrayList<Integer>();
        fibs.add(0);
        fibs.add(1);
        int i =2;
        while(fibs.get(fibs.size()-1) <= n){
        	fibs.add(fibs.get(i-1)+fibs.get(i-2));
        	i++;
        }
        fibs.remove(0);
        fibs.remove(1);
        return fibs;
    }
    
    public static class Jump {
    	int pos;
    	int jumps;
    	Jump(int p, int j) {
    		pos = p;
    		jumps = j;
    	}
    }
		
}
/*
	You are given two non-empty zero-indexed arrays A and B consisting of N integers. Arrays A and B represent N voracious fish in a river, ordered downstream along the flow of the river.
	The fish are numbered from 0 to N − 1. If P and Q are two fish and P < Q, then fish P is initially upstream of fish Q. Initially, each fish has a unique position.
	Fish number P is represented by A[P] and B[P]. Array A contains the sizes of the fish. All its elements are unique. Array B contains the directions of the fish. It contains only 0s and/or 1s, where:
	0 represents a fish flowing upstream,
	1 represents a fish flowing downstream.
	If two fish move in opposite directions and there are no other (living) fish between them, they will eventually meet each other. Then only one fish can stay alive − the larger fish eats the smaller one. More precisely, we say that two fish P and Q meet each other when P < Q, B[P] = 1 and B[Q] = 0, and there are no living fish between them. After they meet:
	If A[P] > A[Q] then P eats Q, and P will still be flowing downstream,
	If A[Q] > A[P] then Q eats P, and Q will still be flowing upstream.
	We assume that all the fish are flowing at the same speed. That is, fish moving in the same direction never meet. The goal is to calculate the number of fish that will stay alive.
	For example, consider arrays A and B such that:
	  A[0] = 4    B[0] = 0
	  A[1] = 3    B[1] = 1
	  A[2] = 2    B[2] = 0
	  A[3] = 1    B[3] = 0
	  A[4] = 5    B[4] = 0
	Initially all the fish are alive and all except fish number 1 are moving upstream. Fish number 1 meets fish number 2 and eats it, then it meets fish number 3 and eats it too. Finally, it meets fish number 4 and is eaten by it. The remaining two fish, number 0 and 4, never meet and therefore stay alive.
	Write a function:
	class Solution { public int solution(int[] A, int[] B); }
	that, given two non-empty zero-indexed arrays A and B consisting of N integers, returns the number of fish that will stay alive.
	For example, given the arrays shown above, the function should return 2, as explained above.
	Assume that:
	N is an integer within the range [1..100,000];
	each element of array A is an integer within the range [0..1,000,000,000];
	each element of array B is an integer that can have one of the following values: 0, 1;
	the elements of A are all distinct.
	Complexity:
	expected worst-case time complexity is O(N);
	expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//SCORE: 100/100
package stackandqueue;

import java.util.Stack;

public class Fish {
	
	public static void main (String[] args) {
		int[] A = new int[]{4,3,2,1,5};
		int[] B = new int[]{0,1,0,0,0};
		System.out.println(solution(A,B));
	}
	
	public static int solution(int[] A, int[] B) {
		Stack<Integer> stack = new Stack<Integer>();
		int duels = 0;
		for (int i = 0; i < A.length; i++) {
			if (B[i] == 0) {
				while(!stack.isEmpty()) {
					duels++;
					if (A[i] < A[stack.peek()]) 
						break;
					stack.pop();
				}
			}
			else 
				stack.push(B[i]);			
		}
		return A.length - duels;
	}
}
/*
	A non-empty zero-indexed array A consisting of N integers is given. A peak is an array element which is larger than its neighbours. More precisely, it is an index P such that 0 < P < N − 1 and A[P − 1] < A[P] > A[P + 1].
	For example, the following array A:
	    A[0] = 1 
	    A[1] = 5 
	    A[2] = 3 
	    A[3] = 4 
	    A[4] = 3 
	    A[5] = 4 
	    A[6] = 1 
	    A[7] = 2 
	    A[8] = 3 
	    A[9] = 4 
	    A[10] = 6 
	    A[11] = 2
	has exactly four peaks: elements 1, 3, 5 and 10.
	You are going on a trip to a range of mountains whose relative heights are represented by array A, as shown in a figure below. You have to choose how many flags you should take with you. The goal is to set the maximum number of flags on the peaks, according to certain rules.
	
	Flags can only be set on peaks. What's more, if you take K flags, then the distance between any two flags should be greater than or equal to K. The distance between indices P and Q is the absolute value |P − Q|.
	For example, given the mountain range represented by array A, above, with N = 12, if you take:
	two flags, you can set them on peaks 1 and 5;
	three flags, you can set them on peaks 1, 5 and 10;
	four flags, you can set only three flags, on peaks 1, 5 and 10.
	You can therefore set a maximum of three flags in this case.
	Write a function:
	class Solution { public int solution(int[] A); }
	that, given a non-empty zero-indexed array A of N integers, returns the maximum number of flags that can be set on the peaks of the array.
	For example, the following array A:
	    A[0] = 1 
	    A[1] = 5 
	    A[2] = 3 
	    A[3] = 4 
	    A[4] = 3 
	    A[5] = 4 
	    A[6] = 1 
	    A[7] = 2 
	    A[8] = 3 
	    A[9] = 4 
	    A[10] = 6 
	    A[11] = 2
	the function should return 3, as explained above.
	Assume that:
	N is an integer within the range [1..200,000];
	each element of array A is an integer within the range [0..1,000,000,000].
	Complexity:
	expected worst-case time complexity is O(N);
	expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//Score: 100/14
package primeandcompositenumbers;

import java.util.ArrayList;

public class Flags {

	public static void main(String[] args) {
		int[] N = new int[] {1,5,3,4,3,4,1,2,3,4,6,2};
		System.out.println(solution(N));
	}
	
	public static int solution(int[] A) {
	    return flags(A);
	  }
	
	public static int[] nextPeak(int[] A) {
		int N = A.length;
		ArrayList<Integer>  peaks = createPeaks(A);
		int[] next = new int[N];
		next[N-1] = -1;
		for (int i = N-2; i > -1; i--) {
			if(peaks.contains(i))
				next[i] = i;
			else
				next[i] = next[i+1];
		}
		return next;
	}
	
	public static ArrayList<Integer> createPeaks(int[] A) {
		ArrayList<Integer> peaks = new ArrayList<Integer>();
		for (int i = 1; i < A.length-1; i++)
			if (A[i] > A[i-1] && A[i] > A[i+1])
				peaks.add(i);
		return peaks;
	}
	
	public static int flags(int[] A) {
		int N = A.length;
		int[] next = nextPeak(A);
		int i = 1;
		int result = 0;
		while ((i-1)*i <= N) {
			int pos = 0;
			int num = 0;
			while (pos < N && num < i) {
				pos = next[pos];
				if (pos == -1)
					break;
				num += 1;
				pos += i;
			}
			result = Math.max(result, num);
			i++;
		}
		return result;
	}
}
/*
	A small frog wants to get to the other side of the road. The frog is currently located at position X and wants to get to a position greater than or equal to Y. The small frog always jumps a fixed distance, D.
	Count the minimal number of jumps that the small frog must perform to reach its target.
	Write a function:
	class Solution { public int solution(int X, int Y, int D); }
	that, given three integers X, Y and D, returns the minimal number of jumps from position X to a position equal to or greater than Y.
	For example, given:
	  X = 10
	  Y = 85
	  D = 30
	the function should return 3, because the frog will be positioned as follows:
	after the first jump, at position 10 + 30 = 40
	after the second jump, at position 10 + 30 + 30 = 70
	after the third jump, at position 10 + 30 + 30 + 30 = 100
	Assume that:
	X, Y and D are integers within the range [1..1,000,000,000];
	X ≤ Y.
	Complexity:
	expected worst-case time complexity is O(1);
	expected worst-case space complexity is O(1).
 */

//SCORE: 100/100
package timecomplexity;

public class FrogJump {

	public static void main(String[] args) {
		int A = 10;
		int B = 85;
		int D = 30;
		System.out.println(solution(A,B, D));
	}
	
	public static int solution(int x, int y, int d) {
		return (int)Math.ceil((double)(y-x)/d);
	}
}
/*
	A non-empty zero-indexed array A consisting of N integers is given.
	A permutation is a sequence containing each element from 1 to N once, and only once.
	For example, array A such that:
	    A[0] = 4
	    A[1] = 1
	    A[2] = 3
	    A[3] = 2
	is a permutation, but array A such that:
	    A[0] = 4
	    A[1] = 1
	    A[2] = 3
	is not a permutation, because value 2 is missing.
	The goal is to check whether array A is a permutation.
	Write a function:
	class Solution { public int solution(int[] A); }
	that, given a zero-indexed array A, returns 1 if array A is a permutation and 0 if it is not.
	For example, given array A such that:
	    A[0] = 4
	    A[1] = 1
	    A[2] = 3
	    A[3] = 2
	the function should return 1.
	Given array A such that:
	    A[0] = 4
	    A[1] = 1
	    A[2] = 3
	the function should return 0.
	Assume that:
	N is an integer within the range [1..100,000];
	each element of array A is an integer within the range [1..1,000,000,000].
	Complexity:
	expected worst-case time complexity is O(N);
	expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//SCORE: 100/100
package countingelements;

public class FrogRiverOne {

	public static void main(String[] args) {
		int[] A = new int[]{1,3,1,4,2,3,5,4};
		int X = 5;
		System.out.println(solution(A,X));
	}
	public static int solution(int[] A, int X) {
		int tmp = 0;
		boolean[] hasLeaf = new boolean[X+1];
		for (int i = 0; i < A.length; i++) {
			if (!hasLeaf[A[i]] && A[i]<=X) {
				hasLeaf[A[i]] = true;
				tmp++;
			}
			if (tmp ==X)
				return i;
		}
		return -1;
	}
}
/*
	A DNA sequence can be represented as a string consisting of the letters A, C, G and T, which correspond to the types of successive nucleotides in the sequence. Each nucleotide has an impact factor, which is an integer. Nucleotides of types A, C, G and T have impact factors of 1, 2, 3 and 4, respectively. You are going to answer several queries of the form: What is the minimal impact factor of nucleotides contained in a particular part of the given DNA sequence?
	The DNA sequence is given as a non-empty string S = S[0]S[1]...S[N-1] consisting of N characters. There are M queries, which are given in non-empty arrays P and Q, each consisting of M integers. The K-th query (0 ≤ K < M) requires you to find the minimal impact factor of nucleotides contained in the DNA sequence between positions P[K] and Q[K] (inclusive).
	For example, consider string S = CAGCCTA and arrays P, Q such that:
	    P[0] = 2    Q[0] = 4
	    P[1] = 5    Q[1] = 5
	    P[2] = 0    Q[2] = 6
	The answers to these M = 3 queries are as follows:
	The part of the DNA between positions 2 and 4 contains nucleotides G and C (twice), whose impact factors are 3 and 2 respectively, so the answer is 2.
	The part between positions 5 and 5 contains a single nucleotide T, whose impact factor is 4, so the answer is 4.
	The part between positions 0 and 6 (the whole string) contains all nucleotides, in particular nucleotide A whose impact factor is 1, so the answer is 1.
	Write a function:
	class Solution { public int[] solution(String S, int[] P, int[] Q); }
	that, given a non-empty zero-indexed string S consisting of N characters and two non-empty zero-indexed arrays P and Q consisting of M integers, returns an array consisting of M integers specifying the consecutive answers to all queries.
	The sequence should be returned as:
	a Results structure (in C), or
	a vector of integers (in C++), or
	a Results record (in Pascal), or
	an array of integers (in any other programming language).
	For example, given the string S = CAGCCTA and arrays P, Q such that:
	    P[0] = 2    Q[0] = 4
	    P[1] = 5    Q[1] = 5
	    P[2] = 0    Q[2] = 6
	the function should return the values [2, 4, 1], as explained above.
	Assume that:
	N is an integer within the range [1..100,000];
	M is an integer within the range [1..50,000];
	each element of arrays P, Q is an integer within the range [0..N − 1];
	P[K] ≤ Q[K], where 0 ≤ K < M;
	string S consists only of upper-case English letters A, C, G, T.
	Complexity:
	expected worst-case time complexity is O(N+M);
	expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//SCORE:100/100
package prefixsums;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class GenomicRangeQuery {
	public static void main(String[] args) {
		int[] P = new int[]{2,5,0};
		int[] Q = new int[]{4,5,6};
		String S = "CAGCCTA";
		System.out.println(Arrays.toString(solution(S,P,Q)));
	}
	public static int[] solution(String S, int[] P, int[] Q) {
		Map<Integer,ArrayList<Integer>> prefSums = getPrefSum(S);
		int[] res = new int[P.length];
		for (int i = 0; i < Q.length; i++) {		
			for (int j = 1; j < 5; j++) {
				int high = prefSums.get(j).get(Q[i]);
				int low = P[i]==0? 0 :prefSums.get(j).get(P[i] -1);
				if (high - low > 0) {
					res[i]=j;
					break;
				}
			}
		}
		return res;
	}
	
	public static Map<Integer,ArrayList<Integer>> getPrefSum(String s) {
		Map<Integer,ArrayList<Integer>> prefSums = new HashMap<Integer,ArrayList<Integer>>();
		for (int j = 0; j < 4; j++) {
			prefSums.put(j+1, new ArrayList<Integer>());
		}
		int[] counters = new int[4];
		for (int i = 0; i < s.length(); i++) {
			switch(s.charAt(i)) {
				case 'A': counters[0]++;break;
				
				case 'C':counters[1]++;break;
				
				case 'G':counters[2]++;break;
				
				case 'T': counters[3]++;break;
				
				default: break;
			}
			for (int j = 0; j < 4; j++) {
				prefSums.get(j+1).add(counters[j]);
			}
		}
		return prefSums;
	}

}
/*
	You have to climb up a ladder. The ladder has exactly N rungs, numbered from 1 to N. With each step, you can ascend by one or two rungs. More precisely:
	with your first step you can stand on rung 1 or 2,
	if you are on rung K, you can move to rungs K + 1 or K + 2,
	finally you have to stand on rung N.
	Your task is to count the number of different ways of climbing to the top of the ladder.
	For example, given N = 4, you have five different ways of climbing, ascending by:
	1, 1, 1 and 1 rung,
	1, 1 and 2 rungs,
	1, 2 and 1 rung,
	2, 1 and 1 rungs, and
	2 and 2 rungs.
	Given N = 5, you have eight different ways of climbing, ascending by:
	1, 1, 1, 1 and 1 rung,
	1, 1, 1 and 2 rungs,
	1, 1, 2 and 1 rung,
	1, 2, 1 and 1 rung,
	1, 2 and 2 rungs,
	2, 1, 1 and 1 rungs,
	2, 1 and 2 rungs, and
	2, 2 and 1 rung.
	The number of different ways can be very large, so it is sufficient to return the result modulo 2P, for a given integer P.
	Write a function:
	class Solution { public int[] solution(int[] A, int[] B); }
	that, given two non-empty zero-indexed arrays A and B of L integers, returns an array consisting of L integers specifying the consecutive answers; position I should contain the number of different ways of climbing the ladder with A[I] rungs modulo 2B[I].
	For example, given L = 5 and:
	    A[0] = 4   B[0] = 3
	    A[1] = 4   B[1] = 2
	    A[2] = 5   B[2] = 4
	    A[3] = 5   B[3] = 3
	    A[4] = 1   B[4] = 1
	the function should return the sequence [5, 1, 8, 0, 1], as explained above.
	Assume that:
	L is an integer within the range [1..30,000];
	each element of array A is an integer within the range [1..L];
	each element of array B is an integer within the range [1..30].
	Complexity:
	expected worst-case time complexity is O(L);
	expected worst-case space complexity is O(L), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//SCORE: 100/75
package fibonaccinumbers;

import java.math.BigInteger;
import java.util.Arrays;
 
public class Ladder {
	int number = 0;
	public static void main(String[] args) {
		int[] A = new int[]{4,4,5,5,1};
		int[] B = new int[]{3,2,4,3,1};
		System.out.println(Arrays.toString(solution(A,B)));
	}
	
	public static int[] solution(int[] A, int[] B) {
		BigInteger[] fibs = new BigInteger[A.length+2];
		fibs[0] = new BigInteger("0");
		fibs[1] = new BigInteger("1");
		for (int i = 2; i < A.length+2; i++) {
			fibs[i] = fibs[i-1].add(fibs[i-2]);
		}
		int[] res = new int[A.length];
		for (int i = 0; i < B.length; i++) {
			BigInteger currPow = new BigInteger(String.valueOf((long)Math.pow(2, B[i])));
			res[i] = fibs[A[i]+1].mod(currPow).intValue();
		}
		return res;
	}
}
/*
	You are given N counters, initially set to 0, and you have two possible operations on them:
	increase(X) − counter X is increased by 1,
	max counter − all counters are set to the maximum value of any counter.
	A non-empty zero-indexed array A of M integers is given. This array represents consecutive operations:
	if A[K] = X, such that 1 ≤ X ≤ N, then operation K is increase(X),
	if A[K] = N + 1 then operation K is max counter.
	For example, given integer N = 5 and array A such that:
	    A[0] = 3
	    A[1] = 4
	    A[2] = 4
	    A[3] = 6
	    A[4] = 1
	    A[5] = 4
	    A[6] = 4
	the values of the counters after each consecutive operation will be:
	    (0, 0, 1, 0, 0)
	    (0, 0, 1, 1, 0)
	    (0, 0, 1, 2, 0)
	    (2, 2, 2, 2, 2)
	    (3, 2, 2, 2, 2)
	    (3, 2, 2, 3, 2)
	    (3, 2, 2, 4, 2)
	The goal is to calculate the value of every counter after all operations.
	Write a function:
	class Solution { public int[] solution(int N, int[] A); }
	that, given an integer N and a non-empty zero-indexed array A consisting of M integers, returns a sequence of integers representing the values of the counters.
	The sequence should be returned as:
	a structure Results (in C), or
	a vector of integers (in C++), or
	a record Results (in Pascal), or
	an array of integers (in any other programming language).
	For example, given:
	    A[0] = 3
	    A[1] = 4
	    A[2] = 4
	    A[3] = 6
	    A[4] = 1
	    A[5] = 4
	    A[6] = 4
	the function should return [3, 2, 2, 4, 2], as explained above.
	Assume that:
	N and M are integers within the range [1..100,000];
	each element of array A is an integer within the range [1..N + 1].
	Complexity:
	expected worst-case time complexity is O(N+M);
	expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//SCORE: 100/100
package countingelements;

import java.util.Arrays;

public class MaxCounter {

	public static void main(String[] args) {
		int[] A = new int[]{3,4,4,6,1,4,4};
		int N = 5;
		System.out.println(Arrays.toString(solution(N, A)));
	}
	public static int[] solution(int N, int[] A) {
		int[] counters = new int[N];
		int currMax = 0;
		int currMin = 0;
		for (int i = 0; i < A.length; i++) {
			if (A[i]<=N) {
				counters[A[i]-1] = Math.max(currMin, counters[A[i]-1]);
				counters[A[i]-1]++;
				currMax = Math.max(currMax, counters[A[i]-1]);
			}
			else if (A[i] == N+1) {
					currMin= currMax;
			}
		}
		
		for (int i = 0; i < counters.length; i++) {
			counters[i] = Math.max(counters[i], currMin);
		}
		return counters;
	}
}
/*
	A non-empty zero-indexed array A consisting of N integers is given.
	A triplet (X, Y, Z), such that 0 ≤ X < Y < Z < N, is called a double slice.
	The sum of double slice (X, Y, Z) is the total of A[X + 1] + A[X + 2] + ... + A[Y − 1] + A[Y + 1] + A[Y + 2] + ... + A[Z − 1].
	For example, array A such that:
	    A[0] = 3
	    A[1] = 2
	    A[2] = 6
	    A[3] = -1
	    A[4] = 4
	    A[5] = 5
	    A[6] = -1
	    A[7] = 2
	contains the following example double slices:
	double slice (0, 3, 6), sum is 2 + 6 + 4 + 5 = 17,
	double slice (0, 3, 7), sum is 2 + 6 + 4 + 5 − 1 = 16,
	double slice (3, 4, 5), sum is 0.
	The goal is to find the maximal sum of any double slice.
	Write a function:
	class Solution { public int solution(int[] A); }
	that, given a non-empty zero-indexed array A consisting of N integers, returns the maximal sum of any double slice.
	For example, given:
	    A[0] = 3
	    A[1] = 2
	    A[2] = 6
	    A[3] = -1
	    A[4] = 4
	    A[5] = 5
	    A[6] = -1
	    A[7] = 2
	the function should return 17, because no double slice of array A has a sum of greater than 17.
	Assume that:
	N is an integer within the range [3..100,000];
	each element of array A is an integer within the range [−10,000..10,000].
	Complexity:
	expected worst-case time complexity is O(N);
	expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//SCORE: 100/100
package maximumslice;

public class MaxDoubleSliceSum {
	public static void main(String[] args) {
		int[] A = new int[]{3,2,6,-1,4,5,-1,2};
		System.out.println(solution(A));

	}
	
	public static int solution(int[] A) {
		int max = 0;
		int[] A1 = new int[A.length];
		int[] A2 = new int[A.length];
		for (int i = 1; i < A.length-1; i++) {
			A1[i] = Math.max(A1[i-1] + A[i], 0);
		}
		for (int i = A.length -2; i >=1; i--) {
			A2[i] = Math.max(A2[i+1] + A[i], 0);
		}
		
		for (int i = 1; i < A.length-1; i++) {
			max = Math.max(max, A1[i-1] + A2[i+1]);
		}
		return max;
	}
}
/*
	A non-empty zero-indexed array A consisting of N integers is given. The product of triplet (P, Q, R) equates to A[P] * A[Q] * A[R] (0 ≤ P < Q < R < N).
	For example, array A such that:
	  A[0] = -3
	  A[1] = 1
	  A[2] = 2
	  A[3] = -2
	  A[4] = 5
	  A[5] = 6
	contains the following example triplets:
	(0, 1, 2), product is −3 * 1 * 2 = −6
	(1, 2, 4), product is 1 * 2 * 5 = 10
	(2, 4, 5), product is 2 * 5 * 6 = 60
	Your goal is to find the maximal product of any triplet.
	Write a function:
	class Solution { public int solution(int[] A); }
	that, given a non-empty zero-indexed array A, returns the value of the maximal product of any triplet.
	For example, given array A such that:
	  A[0] = -3
	  A[1] = 1
	  A[2] = 2
	  A[3] = -2
	  A[4] = 5
	  A[5] = 6
	the function should return 60, as the product of triplet (2, 4, 5) is maximal.
	Assume that:
	N is an integer within the range [3..100,000];
	each element of array A is an integer within the range [−1,000..1,000].
	Complexity:
	expected worst-case time complexity is O(N*log(N));
	expected worst-case space complexity is O(1), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//SCORE: 100/100
package sorting;

import java.util.Arrays;

public class MaxProductOfThree {
	public static void main (String[] args) {
		int[] A = new int[] {-3,1,2,-2,5,6};
		System.out.println(solution(A));
	}
	
	public static int solution(int[] A) {
		Arrays.sort(A);
		System.out.println(Arrays.toString(A));
		int max1 = A[A.length-1] *A[A.length-2] *A[A.length-3];
		int max2 = A[A.length-1] *A[0] *A[1];
		return max1>max2?max1:max2;
	}
}

/*
	A zero-indexed array A consisting of N integers is given. It contains daily prices of a stock share for a period of N consecutive days. If a single share was bought on day P and sold on day Q, where 0 ≤ P ≤ Q < N, then the profit of such transaction is equal to A[Q] − A[P], provided that A[Q] ≥ A[P]. Otherwise, the transaction brings loss of A[P] − A[Q].
	For example, consider the following array A consisting of six elements such that:
	  A[0] = 23171  
	  A[1] = 21011  
	  A[2] = 21123
	  A[3] = 21366  
	  A[4] = 21013  
	  A[5] = 21367
	If a share was bought on day 0 and sold on day 2, a loss of 2048 would occur because A[2] − A[0] = 21123 − 23171 = −2048. If a share was bought on day 4 and sold on day 5, a profit of 354 would occur because A[5] − A[4] = 21367 − 21013 = 354. Maximum possible profit was 356. It would occur if a share was bought on day 1 and sold on day 5.
	Write a function,
	class Solution { public int solution(int[] A); }
	that, given a zero-indexed array A consisting of N integers containing daily prices of a stock share for a period of N consecutive days, returns the maximum possible profit from one transaction during this period. The function should return 0 if it was impossible to gain any profit.
	For example, given array A consisting of six elements such that:
	  A[0] = 23171  
	  A[1] = 21011  
	  A[2] = 21123
	  A[3] = 21366  
	  A[4] = 21013  
	  A[5] = 21367
	the function should return 356, as explained above.
	Assume that:
	N is an integer within the range [0..400,000];
	each element of array A is an integer within the range [0..200,000].
	Complexity:
	expected worst-case time complexity is O(N);
	expected worst-case space complexity is O(1), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//SCORE: 100/100
package maximumslice;

import java.util.Arrays;

public class MaxProfit {
	public static void main(String[] args) {
		int[] A = new int[]{23171, 21011,21123, 21366, 21013, 21367};
		System.out.println(solution(A));
	}
	
	public static int solution(int[] A) {
		if (A.length == 0)
			return 0;
		int[] array = new int[A.length];
		array[0] = 0;
		for (int i = 1; i < A.length; i++) {
			array[i] = A[i] - A[i-1];
		}
		return goldenMaxSlice(array);
	}
	
	public static int goldenMaxSlice(int[] A) {
		int arrMax = Arrays.stream(A).max().getAsInt();
		if (arrMax < 0)
			return arrMax;
		int maxEnding = 0;
		int maxSlice = 0;
		for (int i = 0; i < A.length; i++) {
			maxEnding = (maxEnding + A[i])>0? (maxEnding + A[i]): 0;
			maxSlice = maxSlice>maxEnding? maxSlice:maxEnding;
		}
		return maxSlice;
	}
		
}
/*
	A non-empty zero-indexed array A consisting of N integers is given. A pair of integers (P, Q), such that 0 ≤ P ≤ Q < N, is called a slice of array A. The sum of a slice (P, Q) is the total of A[P] + A[P+1] + ... + A[Q].
	Write a function:
	int solution(int A[], int N);
	that, given an array A consisting of N integers, returns the maximum sum of any slice of A.
	For example, given array A such that:
	A[0] = 3  A[1] = 2  A[2] = -6
	A[3] = 4  A[4] = 0
	the function should return 5 because:
	(3, 4) is a slice of A that has sum 4,
	(2, 2) is a slice of A that has sum −6,
	(0, 1) is a slice of A that has sum 5,
	no other slice of A has sum greater than (0, 1).
	Assume that:
	N is an integer within the range [1..1,000,000];
	each element of array A is an integer within the range [−1,000,000..1,000,000];
	the result will be an integer within the range [−2,147,483,648..2,147,483,647].
	Complexity:
	expected worst-case time complexity is O(N);
	expected worst-case space complexity is O(1), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//SCORE: 100/100
package maximumslice;

public class MaxSliceSum {
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] A = new int[]{3,2,-6,4,0};
		System.out.println(solution(A));
	}
	
	public static int solution(int[] A) {
		int max=Integer.MIN_VALUE;
		for (int i = 0; i < A.length; i++) {
			max = A[i]>max?A[i]:max;
		}
		if(max<=0)
			return max;
		
		int maxSliceSum = 0;
		int currentSum = 0;
		for (int i = 0; i < A.length; i++) {
			currentSum = (currentSum+A[i])>0?(currentSum+A[i]):0;
			maxSliceSum=currentSum>maxSliceSum?currentSum:maxSliceSum;
		}
		return maxSliceSum;
	}
	

}
/*
	Let A be a non-empty zero-indexed array consisting of N integers.
	The abs sum of two for a pair of indices (P, Q) is the absolute value |A[P] + A[Q]|, for 0 ≤ P ≤ Q < N.
	For example, the following array A:
	  A[0] =  1  
	  A[1] =  4 
	  A[2] = -3
	has pairs of indices (0, 0), (0, 1), (0, 2), (1, 1), (1, 2), (2, 2). 
	The abs sum of two for the pair (0, 0) is A[0] + A[0] = |1 + 1| = 2. 
	The abs sum of two for the pair (0, 1) is A[0] + A[1] = |1 + 4| = 5. 
	The abs sum of two for the pair (0, 2) is A[0] + A[2] = |1 + (−3)| = 2. 
	The abs sum of two for the pair (1, 1) is A[1] + A[1] = |4 + 4| = 8. 
	The abs sum of two for the pair (1, 2) is A[1] + A[2] = |4 + (−3)| = 1. 
	The abs sum of two for the pair (2, 2) is A[2] + A[2] = |(−3) + (−3)| = 6. 
	Write a function:
	int solution(int A[], int N);
	that, given a non-empty zero-indexed array A consisting of N integers, returns the minimal abs sum of two for any pair of indices in this array.
	For example, given the following array A:
	  A[0] =  1 
	  A[1] =  4  
	  A[2] = -3
	the function should return 1, as explained above.
	Given array A:
	  A[0] = -8  
	  A[1] =  4  
	  A[2] =  5   
	  A[3] =-10  
	  A[4] =  3
	the function should return |(−8) + 5| = 3.
	Assume that:
	N is an integer within the range [1..100,000];
	each element of array A is an integer within the range [−1,000,000,000..1,000,000,000].
	Complexity:
	expected worst-case time complexity is O(N*log(N));
	expected worst-case space complexity is O(1), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
*/

//SCORE: 100/100 (both solutions, caterpillar and binary search)
package caterpillar;

import java.util.Arrays;

public class MinAbsSumOfTwo {
	
	public static void main(String[] args) {
		int[] A = new int[]{1, 4, -3};
		System.out.println(solution1(A));
	}
	
	public static int solution(int[] A) {
		Arrays.sort(A);
		int min = Integer.MAX_VALUE;
		for (int i = 0; i < A.length; i++) {
			min = Math.min(min, Math.abs(A[i] + findBestMatch(-A[i],A)));
		}
		return min;
	}
	
	public static int solution1(int[] A) {
		Arrays.sort(A);
		return getMinSum(A);
	}
	
	public static int findBestMatch(int target, int[] A) {
		if (A.length == 1)
			return A[0];
		int beg = 0;
		int end = A.length - 1;
		while(beg<=end) {
			int middle= (beg+end)/2;
			if (A[middle] == target)
				return A[middle];
			if (end - beg == 1)
				return Math.abs(A[end] - target) < Math.abs(A[beg] - target)? A[end]: A[beg];
			if (A[middle]>target){
				end= middle;
			}else {
				beg = middle;
			}
		}
		return A[0];
	}
	
	public static int getMinSum(int[] A) {
		//all positives
		if (A[0]>=0)
			return A[0]*2;
		//all negatives
		if (A[A.length-1] <= 0)
			return -A[A.length-1]*2;
		int front = A.length - 1;
		int back = 0;
		int min = Math.abs(A[back] + A[front]);
		while (back<=front) {
			int tmp = Math.abs(A[back] + A[front]);
			min = Math.min(min,tmp);
			if (Math.abs(A[back+1] + A[front]) <= tmp) 
				back++;
			else if(Math.abs(A[back] + A[front-1]) <= tmp) 			
				front--;
			else {
				back++;
				front--;
			}
		}
		return min;
	}
}
/*
	A non-empty zero-indexed array A consisting of N integers is given. A pair of integers (P, Q), such that 0 ≤ P < Q < N, is called a slice of array A (notice that the slice contains at least two elements). The average of a slice (P, Q) is the sum of A[P] + A[P + 1] + ... + A[Q] divided by the length of the slice. To be precise, the average equals (A[P] + A[P + 1] + ... + A[Q]) / (Q − P + 1).
	For example, array A such that:
	    A[0] = 4
	    A[1] = 2
	    A[2] = 2
	    A[3] = 5
	    A[4] = 1
	    A[5] = 5
	    A[6] = 8
	contains the following example slices:
	slice (1, 2), whose average is (2 + 2) / 2 = 2;
	slice (3, 4), whose average is (5 + 1) / 2 = 3;
	slice (1, 4), whose average is (2 + 2 + 5 + 1) / 4 = 2.5.
	The goal is to find the starting position of a slice whose average is minimal.
	Write a function:
	class Solution { public int solution(int[] A); }
	that, given a non-empty zero-indexed array A consisting of N integers, returns the starting position of the slice with the minimal average. If there is more than one slice with a minimal average, you should return the smallest starting position of such a slice.
	For example, given array A such that:
	    A[0] = 4
	    A[1] = 2
	    A[2] = 2
	    A[3] = 5
	    A[4] = 1
	    A[5] = 5
	    A[6] = 8
	the function should return 1, as explained above.
	Assume that:
	N is an integer within the range [2..100,000];
	each element of array A is an integer within the range [−10,000..10,000].
	Complexity:
	expected worst-case time complexity is O(N);
	expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//SCORE: 100/100 (both solutions)
package prefixsums;


public class MinAvgTwoSlice {
	public static void main(String[] args) {
		int[] A = new int[]{4,2,2,5,1,5,8}; 
		System.out.println(solution1(A));
	}

	//using caterpillar method (min value will be inside 2 or 3 element slices)
	public static int solution(int[] A) {
		int front=1;
		int back= 0;
		int res = 0;
		int curr = A[0]+A[1];
		double min = (double)curr/2;
		double tmpMin = min;
		
		while (true) {
			if (front - back == 1) {
				front++;
				if (front == A.length)
					return res;
				curr += A[front];
			}
			else {
				curr -= A[back];
				back++;
			}

			tmpMin=(double)curr/(front-back+1);
			if (tmpMin < min) {
				res = back;
				min = tmpMin;
			}
		}
	}
	
	public static int solution1(int[] A) {
		int res = 0;
		double min = (double)(A[0]+A[1])/2;
		
		for (int j = 0; j < A.length-2; j++) {
			if ((double)(A[j] + A[j+1]) / 2 < min){
				min = (double)(A[j] + A[j+1]) / 2;
				res=j;
			}
			if ((double)(A[j] + A[j+1] + A[j+2]) / 3 < min){
				min = (double)(A[j] + A[j+1] + A[j+2]) / 3;
				res=j;
			}
		}
		
		if ((double)(A[A.length-1] + A[A.length-2])/2 < min)
			return A.length - 2;
		return res;
	}

}
/*
	You are given integers K, M and a non-empty zero-indexed array A consisting of N integers. Every element of the array is not greater than M.
	You should divide this array into K blocks of consecutive elements. The size of the block is any integer between 0 and N. Every element of the array should belong to some block.
	The sum of the block from X to Y equals A[X] + A[X + 1] + ... + A[Y]. The sum of empty block equals 0.
	The large sum is the maximal sum of any block.
	For example, you are given integers K = 3, M = 5 and array A such that:
	  A[0] = 2
	  A[1] = 1
	  A[2] = 5
	  A[3] = 1
	  A[4] = 2
	  A[5] = 2
	  A[6] = 2
	The array can be divided, for example, into the following blocks:
	[2, 1, 5, 1, 2, 2, 2], [], [] with a large sum of 15;
	[2], [1, 5, 1, 2], [2, 2] with a large sum of 9;
	[2, 1, 5], [], [1, 2, 2, 2] with a large sum of 8;
	[2, 1], [5, 1], [2, 2, 2] with a large sum of 6.
	The goal is to minimize the large sum. In the above example, 6 is the minimal large sum.
	Write a function:
	class Solution { public int solution(int K, int M, int[] A); }
	that, given integers K, M and a non-empty zero-indexed array A consisting of N integers, returns the minimal large sum.
	For example, given K = 3, M = 5 and array A such that:
	  A[0] = 2
	  A[1] = 1
	  A[2] = 5
	  A[3] = 1
	  A[4] = 2
	  A[5] = 2
	  A[6] = 2
	the function should return 6, as explained above. Assume that:
	N and K are integers within the range [1..100,000];
	M is an integer within the range [0..10,000];
	each element of array A is an integer within the range [0..M].
	Complexity:
	expected worst-case time complexity is O(N*log(N+M));
	expected worst-case space complexity is O(1), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//SCORE: 100/100 (both, recursive and iterative approach)
package binarysearch;

public class MinMaxDivision {

	public static void main(String[] args) {
		int[] A = new int[]{2,1,5,1,2,2,2};
		int M = 5;
		int K = 3;
		System.out.println(solution(K, M, A));
	}
	
	 public static int solution(int K, int M, int[] A) {
		 int sum=0;
		 int largestEl = 0;
		 for (int i = 0; i < A.length; i++) {
			largestEl= largestEl>=A[i] ? largestEl:A[i];
			sum += A[i];
		}
		int idealMin = Math.max((int)Math.ceil((double)sum/K), largestEl);
		return binarySearchIterative(idealMin, sum, A, K);
	 }
	 
	 public static int binarySearchRecursive(int min, int max, int[] A, int K) {
		 if (max - min < 2)
			 if (verifySolution(min, A, K))
				 return min;
			 else
				 return max;
		 int middle = (min+max)/2;
		 if (verifySolution(middle, A, K))
			 return binarySearchRecursive(min, middle, A, K);
		 else 
			 return binarySearchRecursive(middle, max, A, K);	 
	 }
	 
	 public static int binarySearchIterative(int min, int max, int[] A, int K) {
		 int res=0;
		 int beg= min;
		 int end = max;
		 while (beg<=end) {
			 int middle = (beg+end)/2;
			 if (verifySolution(middle,A,K)) {
				 end=middle-1;
				 res = middle;
			 } else
				 beg=middle+1;
		 } 
		 return res;
	 }
	 
	 public static boolean verifySolution(int x, int[] A, int K) {
		 int tmp=0;
		 int count=1;
		 for (int i = 0; i < A.length; i++) {
			if (tmp + A[i] <= x)
				tmp += A[i];
			else{
				count++;
				tmp=A[i];
				if (count>K)
					return false;
			}	
		}
		 return true;
	 }		
}
/*
	An integer N is given, representing the area of some rectangle.
	The area of a rectangle whose sides are of length A and B is A * B, and the perimeter is 2 * (A + B).
	The goal is to find the minimal perimeter of any rectangle whose area equals N. The sides of this rectangle should be only integers.
	For example, given integer N = 30, rectangles of area 30 are:
	(1, 30), with a perimeter of 62,
	(2, 15), with a perimeter of 34,
	(3, 10), with a perimeter of 26,
	(5, 6), with a perimeter of 22.
	Write a function:
	class Solution { public int solution(int N); }
	that, given an integer N, returns the minimal perimeter of any rectangle whose area is exactly equal to N.
	For example, given an integer N = 30, the function should return 22, as explained above.
	Assume that:
	N is an integer within the range [1..1,000,000,000].
	Complexity:
	expected worst-case time complexity is O(sqrt(N));
	expected worst-case space complexity is O(1).
 */

//Score: 100/100
package primeandcompositenumbers;

public class MinPerimeterRectangle {

	public static void main(String[] args) {
		System.out.println(solution(30));
	}
	
	public static int solution(int N) {
		int min = Integer.MAX_VALUE;
		for (int i = 1; i*i <= N; i++) {
			if (N % i == 0) 
				min = 2*(i+N/i)<min?2*(i+N/i):min;
		}
		return min;
	}
}
/*
	Write a function:
	class Solution { public int solution(int[] A); }
	that, given a non-empty zero-indexed array A of N integers, returns the minimal positive integer that does not occur in A.
	For example, given:
	  A[0] = 1    
	  A[1] = 3    
	  A[2] = 6
	  A[3] = 4    
	  A[4] = 1    
	  A[5] = 2
	the function should return 5.
	Assume that:
	N is an integer within the range [1..100,000];
	each element of array A is an integer within the range [−2,147,483,648..2,147,483,647].
	Complexity:
	expected worst-case time complexity is O(N);
	expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//SCORE: 100/100
package countingelements;

import java.util.ArrayList;
import java.util.stream.Collectors;
import java.util.stream.IntStream;


public class MissingInteger {
	public static void main(String[] args) {
		int[] A = new int[]{1,3,6,4,1,2};
		System.out.println(solution(A));
	}

	public static int solution(int[] A) {
		ArrayList<Integer> numbers = IntStream.of(A).boxed().filter(x->x>0).sorted().distinct().collect(Collectors.toCollection(ArrayList<Integer>::new));
		if (numbers.size() == 0)
			return 1;
		for (int i = 0; i < numbers.size(); i++) {
			if (numbers.get(i) != i+1)
				return i+1;
		}
		return numbers.size()+1;
	}
}
/*
	You are given two non-empty zero-indexed arrays A and B consisting of N integers. These arrays represent N planks. More precisely, A[K] is the start and B[K] the end of the K−th plank.
	Next, you are given a non-empty zero-indexed array C consisting of M integers. This array represents M nails. More precisely, C[I] is the position where you can hammer in the I−th nail.
	We say that a plank (A[K], B[K]) is nailed if there exists a nail C[I] such that A[K] ≤ C[I] ≤ B[K].
	The goal is to find the minimum number of nails that must be used until all the planks are nailed. In other words, you should find a value J such that all planks will be nailed after using only the first J nails. More precisely, for every plank (A[K], B[K]) such that 0 ≤ K < N, there should exist a nail C[I] such that I < J and A[K] ≤ C[I] ≤ B[K].
	For example, given arrays A, B such that:
	    A[0] = 1    B[0] = 4
	    A[1] = 4    B[1] = 5
	    A[2] = 5    B[2] = 9
	    A[3] = 8    B[3] = 10
	four planks are represented: [1, 4], [4, 5], [5, 9] and [8, 10].
	Given array C such that:
	    C[0] = 4
	    C[1] = 6
	    C[2] = 7
	    C[3] = 10
	    C[4] = 2
	if we use the following nails:
	0, then planks [1, 4] and [4, 5] will both be nailed.
	0, 1, then planks [1, 4], [4, 5] and [5, 9] will be nailed.
	0, 1, 2, then planks [1, 4], [4, 5] and [5, 9] will be nailed.
	0, 1, 2, 3, then all the planks will be nailed.
	Thus, four is the minimum number of nails that, used sequentially, allow all the planks to be nailed.
	Write a function:
	class Solution { public int solution(int[] A, int[] B, int[] C); }
	that, given two non-empty zero-indexed arrays A and B consisting of N integers and a non-empty zero-indexed array C consisting of M integers, returns the minimum number of nails that, used sequentially, allow all the planks to be nailed.
	If it is not possible to nail all the planks, the function should return −1.
	For example, given arrays A, B, C such that:
	    A[0] = 1    B[0] = 4
	    A[1] = 4    B[1] = 5
	    A[2] = 5    B[2] = 9
	    A[3] = 8    B[3] = 10
	    
	    C[0] = 4
	    C[1] = 6
	    C[2] = 7
	    C[3] = 10
	    C[4] = 2
	the function should return 4, as explained above.
	Assume that:
	N and M are integers within the range [1..30,000];
	each element of arrays A, B, C is an integer within the range [1..2*M];
	A[K] ≤ B[K].
	Complexity:
	expected worst-case time complexity is O((N+M)*log(M));
	expected worst-case space complexity is O(M), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//SCORE: 100/100
package binarysearch;

import java.util.Arrays;

public class NailingPlanks {

	public static void main(String[] args) {
		int[] A = new int[]{1,4,5,8};
		int[] B = new int[]{4,5,9,10};
		int[] C = new int[]{4,6,7,10,2};


		System.out.println(solution(A, B, C));
	}
	
	 public static int solution(int[] A, int[] B, int[] C) {
		int N = A.length;
		int M = C.length;
		int[][] sortedNails = new int[M][2];
		for (int i = 0; i < M; i++) {
			sortedNails[i][0] = C[i];
			sortedNails[i][1] = i;
		}
		Arrays.sort(sortedNails, (int[] x, int[] y) -> (Integer.compare(x[0], y[0])));
	
		int res = 0;
		for (int i = 0; i < N; i++) {
			res = minIndex(A[i], B[i], sortedNails, res);
			if (res == -1)
				return -1;
		}
		 return res+1;
	 }
	 
	 public static int minIndex(int pStart, int pEnd, int[][] nails, int oldRes) {
		int beg = 0;
		int end = nails.length-1;
		int res=-1;
		while(beg<=end) {
			int middle= (beg + end) / 2;
			if (nails[middle][0] < pStart) {
				beg = middle+1;

			}else if(nails[middle][0] >pEnd) {
				end = middle -1;
			}
			else {
				end = middle-1;
				res = middle;
			}
		}
		if (res == -1 || nails[res][0] > pEnd)
			return -1;
		int min= nails[res][1];
		while(res < nails.length && nails[res][0] <= pEnd) {
			min = Math.min(min, nails[res][1]);
			if(min<=oldRes)
				return oldRes;
			res++;
		}

		return min;
	 }
		
}
/*
	A string S consisting of N characters is called properly nested if:
	S is empty;
	S has the form "(U)" where U is a properly nested string;
	S has the form "VW" where V and W are properly nested strings.
	For example, string "(()(())())" is properly nested but string "())" isn't.
	Write a function:
	class Solution { public int solution(String S); }
	that, given a string S consisting of N characters, returns 1 if string S is properly nested and 0 otherwise.
	For example, given S = "(()(())())", the function should return 1 and given S = "())", the function should return 0, as explained above.
	Assume that:
	N is an integer within the range [0..1,000,000];
	string S consists only of the characters "(" and/or ")".
	Complexity:
	expected worst-case time complexity is O(N);
	expected worst-case space complexity is O(1) (not counting the storage required for input arguments).
 */

//SCORE: 100/100
package stackandqueue;

import java.util.Stack;

public class Nesting {
	
	public static void main (String[] args) {
		String S= "((()()))";
		System.out.println(solution(S));
	}
	
	public static int solution(String S) {
		Stack<Character> chars = new Stack<Character>();
		for (int i = 0; i < S.length(); i++) {
			if (S.charAt(i) == '(') {
				chars.push(S.charAt(i));
			} else if (S.charAt(i) == ')' && chars.size()>0) {
				chars.pop();
			} else return 0;
		}
		return chars.size()==0?1:0;
	}
}
/*
	Given an array A of N integers, we draw N discs in a 2D plane such that the I-th disc is centered on (0,I) and has a radius of A[I]. We say that the J-th disc and K-th disc intersect if J ≠ K and J-th and K-th discs have at least one common point.
	Write a function:
	int solution(int A[], int N);
	that, given an array A describing N discs as explained above, returns the number of pairs of intersecting discs. For example, given N=6 and:
	A[0] = 1  A[1] = 5  A[2] = 2 
	A[3] = 1  A[4] = 4  A[5] = 0  
	intersecting discs appear in eleven pairs of elements:
	0 and 1,
	0 and 2,
	0 and 4,
	1 and 2,
	1 and 3,
	1 and 4,
	1 and 5,
	2 and 3,
	2 and 4,
	3 and 4,
	4 and 5.
	so the function should return 11.
	The function should return −1 if the number of intersecting pairs exceeds 10,000,000.
	Assume that:
	N is an integer within the range [0..100,000];
	each element of array A is an integer within the range [0..2147483647].
	Complexity:
	expected worst-case time complexity is O(N*log(N));
	expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//SCORE: 100/62
package sorting;

public class NumberOfDiscIntersection {
	public static void main (String[] args) {
		int[] A = new int[] {1, 5, 2, 1, 4, 0};
		System.out.println(solution(A));
	}	

	public static int solution(int[] A) {
		int x = 0;
		for (int i = 0; i < A.length-1; i++) {
			for (int j = i+1; j < A.length; j++) {
				if ((long)A[i]+i >= j - (long)A[j]) {
					x++;
					if (x>10000000)
						return -1;
				}
			}
		}
		return x;
	}
}
/*
	A non-empty zero-indexed array A consisting of N integers is given. The consecutive elements of array A represent consecutive cars on a road.
	Array A contains only 0s and/or 1s:
	0 represents a car traveling east,
	1 represents a car traveling west.
	The goal is to count passing cars. We say that a pair of cars (P, Q), where 0 ≤ P < Q < N, is passing when P is traveling to the east and Q is traveling to the west.
	For example, consider array A such that:
	  A[0] = 0
	  A[1] = 1
	  A[2] = 0
	  A[3] = 1
	  A[4] = 1
	We have five pairs of passing cars: (0, 1), (0, 3), (0, 4), (2, 3), (2, 4).
	Write a function:
	class Solution { public int solution(int[] A); }
	that, given a non-empty zero-indexed array A of N integers, returns the number of passing cars.
	The function should return −1 if the number of passing cars exceeds 1,000,000,000.
	For example, given:
	  A[0] = 0
	  A[1] = 1
	  A[2] = 0
	  A[3] = 1
	  A[4] = 1
	the function should return 5, as explained above.
	Assume that:
	N is an integer within the range [1..100,000];
	each element of array A is an integer that can have one of the following values: 0, 1.
	Complexity:
	expected worst-case time complexity is O(N);
	expected worst-case space complexity is O(1), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//SCORE: 100/100
package prefixsums;

public class PassingCars {
	public static void main(String[] args) {
		int[] A = new int[]{0,1,0,1,1};
		System.out.println(solution(A));
	}
	public static int solution(int[] A) {
		int res = 0;
		int ones = 0;
		for (int i = A.length-1; i >= 0; i--) {
			if (A[i] == 1)
				ones++;
			else {
				res += ones;
				if (res > 1000000000)
					return -1;
			}
		}
		return res;
	}
}
/*
	A non-empty zero-indexed array A consisting of N integers is given.
	A peak is an array element which is larger than its neighbors. More precisely, it is an index P such that 0 < P < N − 1,  A[P − 1] < A[P] and A[P] > A[P + 1].
	For example, the following array A:
	    A[0] = 1
	    A[1] = 2
	    A[2] = 3
	    A[3] = 4
	    A[4] = 3
	    A[5] = 4
	    A[6] = 1
	    A[7] = 2
	    A[8] = 3
	    A[9] = 4
	    A[10] = 6
	    A[11] = 2
	has exactly three peaks: 3, 5, 10.
	We want to divide this array into blocks containing the same number of elements. More precisely, we want to choose a number K that will yield the following blocks:
	A[0], A[1], ..., A[K − 1],
	A[K], A[K + 1], ..., A[2K − 1],
	...
	A[N − K], A[N − K + 1], ..., A[N − 1].
	What's more, every block should contain at least one peak. Notice that extreme elements of the blocks (for example A[K − 1] or A[K]) can also be peaks, but only if they have both neighbors (including one in an adjacent blocks).
	The goal is to find the maximum number of blocks into which the array A can be divided.
	Array A can be divided into blocks as follows:
	one block (1, 2, 3, 4, 3, 4, 1, 2, 3, 4, 6, 2). This block contains three peaks.
	two blocks (1, 2, 3, 4, 3, 4) and (1, 2, 3, 4, 6, 2). Every block has a peak.
	three blocks (1, 2, 3, 4), (3, 4, 1, 2), (3, 4, 6, 2). Every block has a peak. Notice in particular that the first block (1, 2, 3, 4) has a peak at A[3], because A[2] < A[3] > A[4], even though A[4] is in the adjacent block.
	However, array A cannot be divided into four blocks, (1, 2, 3), (4, 3, 4), (1, 2, 3) and (4, 6, 2), because the (1, 2, 3) blocks do not contain a peak. Notice in particular that the (4, 3, 4) block contains two peaks: A[3] and A[5].
	The maximum number of blocks that array A can be divided into is three.
	Write a function:
	class Solution { public int solution(int[] A); }
	that, given a non-empty zero-indexed array A consisting of N integers, returns the maximum number of blocks into which A can be divided.
	If A cannot be divided into some number of blocks, the function should return 0.
	For example, given:
	    A[0] = 1
	    A[1] = 2 
	    A[2] = 3 
	    A[3] = 4 
	    A[4] = 3 
	    A[5] = 4 
	    A[6] = 1 
	    A[7] = 2 
	    A[8] = 3 
	    A[9] = 4 
	    A[10] = 6 
	    A[11] = 2
	the function should return 3, as explained above.
	Assume that:
	N is an integer within the range [1..100,000];
	each element of array A is an integer within the range [0..1,000,000,000].
	Complexity:
	expected worst-case time complexity is O(N*log(log(N)));
	expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//Score: 100/100

package primeandcompositenumbers;

import java.util.ArrayList;

public class Peaks {

	public static void main(String[] args) {
		int[] N = new int[] {1,2,3,4,3,4,1,2,3,4,6,2};
		System.out.println(solution(N));
	}
	
	public static int solution(int[] A) {
		int peakCount = 0;
		ArrayList<Integer> peaks = new ArrayList<Integer>();
	    for (int i = 1; i < A.length-1; i++) {
			if (A[i]>A[i-1] && A[i]>A[i+1]) {
				peaks.add(i);
				peakCount++;
			}
		}
		for (int size =  1; size <=A.length; size++) {
			 int blocks = A.length/size;
			 if (A.length % size != 0 || blocks>peakCount)
				 continue;
			 
			 boolean ok = true;
			 int threshold = 0;
			 for (int j = 0; j < peaks.size(); j++) {
				if(peaks.get(j) / size > threshold) {
					ok = false;
					break;
				}
				if (peaks.get(j)/size == threshold)
					threshold++;
			}
			
			if (threshold != blocks) 
				ok= false;
			if(ok) 
				return blocks;
		}
		return 0;
	}	
}
/*
	A non-empty zero-indexed array A consisting of N integers is given.
	A permutation is a sequence containing each element from 1 to N once, and only once.
	For example, array A such that:
	    A[0] = 4
	    A[1] = 1
	    A[2] = 3
	    A[3] = 2
	is a permutation, but array A such that:
	    A[0] = 4
	    A[1] = 1
	    A[2] = 3
	is not a permutation, because value 2 is missing.
	The goal is to check whether array A is a permutation.
	Write a function:
	class Solution { public int solution(int[] A); }
	that, given a zero-indexed array A, returns 1 if array A is a permutation and 0 if it is not.
	For example, given array A such that:
	    A[0] = 4
	    A[1] = 1
	    A[2] = 3
	    A[3] = 2
	the function should return 1.
	Given array A such that:
	    A[0] = 4
	    A[1] = 1
	    A[2] = 3
	the function should return 0.
	Assume that:
	N is an integer within the range [1..100,000];
	each element of array A is an integer within the range [1..1,000,000,000].
	Complexity:
	expected worst-case time complexity is O(N);
	expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//SCORE: 100/100
package countingelements;

import java.util.Arrays;

public class PermCheck {

	public static void main(String[] args) {
		int[] A = new int[]{5,3,4,1,2,2,6};
		System.out.println(solution(A));
	}
	public static int solution(int[] A) {
		Arrays.sort(A);
		for (int i = 0; i < A.length; i++) {
			if (A[i] != i+1)
				return 0;
		}
		return 1;
	}
}
/*
	A zero-indexed array A consisting of N different integers is given. The array contains integers in the range [1..(N + 1)], which means that exactly one element is missing.
	Your goal is to find that missing element.
	Write a function:
	class Solution { public int solution(int[] A); }
	that, given a zero-indexed array A, returns the value of the missing element.
	For example, given array A such that:
	  A[0] = 2
	  A[1] = 3
	  A[2] = 1
	  A[3] = 5
	the function should return 4, as it is the missing element.
	Assume that:
	N is an integer within the range [0..100,000];
	the elements of A are all distinct;
	each element of array A is an integer within the range [1..(N + 1)].
	Complexity:
	expected worst-case time complexity is O(N);
	expected worst-case space complexity is O(1), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//SCORE: 100/100
package timecomplexity;

public class PermMissingElements {

	public static void main(String[] args) {
		int[] A = new int[]{2,3,1,5};
		System.out.println(solution(A));
	}
	
	public static int solution(int[] A) {
		int[] counters = new int[A.length+2];
		for (int i = 0; i < A.length; i++) {
			counters[A[i]] = 1;
		}
		for (int i = 1; i < counters.length; i++) {
			if (counters[i] == 0)
				return i;
		}
		//no element is missing
		return -1;
	}
}
/*
	You are going to build a stone wall. The wall should be straight and N meters long, and its thickness should be constant; however, it should have different heights in different places. The height of the wall is specified by a zero-indexed array H of N positive integers. H[I] is the height of the wall from I to I+1 meters to the right of its left end. In particular, H[0] is the height of the wall's left end and H[N−1] is the height of the wall's right end.
	The wall should be built of cuboid stone blocks (that is, all sides of such blocks are rectangular). Your task is to compute the minimum number of blocks needed to build the wall.
	Write a function:
	class Solution { public int solution(int[] H); }
	that, given a zero-indexed array H of N positive integers specifying the height of the wall, returns the minimum number of blocks needed to build it.
	For example, given array H containing N = 9 integers:
	  H[0] = 8    H[1] = 8    H[2] = 5    
	  H[3] = 7    H[4] = 9    H[5] = 8    
	  H[6] = 7    H[7] = 4    H[8] = 8    
	the function should return 7. The figure shows one possible arrangement of seven blocks.
	
	Assume that:
	N is an integer within the range [1..100,000];
	each element of array H is an integer within the range [1..1,000,000,000].
	Complexity:
	expected worst-case time complexity is O(N);
	expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//SCORE: 100/100
package stackandqueue;

import java.util.Stack;

public class StoneWall {
	
	public static void main (String[] args) {
		int[] A = new int[]{8,8,5,7,9,8,7,4,8};
		System.out.println(solution(A));
	}
	
	public static int solution(int[] H) {
		Stack<Integer> stack = new Stack<Integer>();
		int blocks = 1;
		stack.push(H[0]);
		for (int i = 1; i < H.length; i++) {
			if (stack.peek() ==  H[i])
				continue;
			else if (H[i] > stack.peek()) {
				stack.push(H[i]);
				blocks++;
			} else {
				while(stack.size()>0 && stack.peek()>H[i])
					stack.pop();
				if (stack.size() == 0 || stack.peek() != H[i]) {
					stack.push(H[i]);
					blocks++;
				}
			}
		}
		return blocks;
	}
}
/*
	A non-empty zero-indexed array A consisting of N integers is given. Array A represents numbers on a tape.
	Any integer P, such that 0 < P < N, splits this tape into two non-empty parts: A[0], A[1], ..., A[P − 1] and A[P], A[P + 1], ..., A[N − 1].
	The difference between the two parts is the value of: |(A[0] + A[1] + ... + A[P − 1]) − (A[P] + A[P + 1] + ... + A[N − 1])|
	In other words, it is the absolute difference between the sum of the first part and the sum of the second part.
	For example, consider array A such that:
	  A[0] = 3
	  A[1] = 1
	  A[2] = 2
	  A[3] = 4
	  A[4] = 3
	We can split this tape in four places:
	P = 1, difference = |3 − 10| = 7 
	P = 2, difference = |4 − 9| = 5 
	P = 3, difference = |6 − 7| = 1 
	P = 4, difference = |10 − 3| = 7 
	Write a function:
	class Solution { public int solution(int[] A); }
	that, given a non-empty zero-indexed array A of N integers, returns the minimal difference that can be achieved.
	For example, given:
	  A[0] = 3
	  A[1] = 1
	  A[2] = 2
	  A[3] = 4
	  A[4] = 3
	the function should return 1, as explained above.
	Assume that:
	N is an integer within the range [2..100,000];
	each element of array A is an integer within the range [−1,000..1,000].
	Complexity:
	expected worst-case time complexity is O(N);
	expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//SCORE: 100/100
package timecomplexity;

public class TapeEquilibrium {

	public static void main(String[] args) {
		int[] A = new int[]{3,1,2,4,3};
		System.out.println(solution(A));
	}
	
	public static int solution(int[] A) {
		int res = Integer.MAX_VALUE;
		int tmp=0;
		int sum = 0;
		for (int i = 0; i < A.length; i++) {
			sum += A[i];
		}
		for (int i = 0; i < A.length-1; i++) {
			tmp+=A[i];
			res = Math.min(res, Math.abs(tmp - (sum - tmp)));
		}
		return res;
	}	
}
/*
	There are N ropes numbered from 0 to N − 1, whose lengths are given in a zero-indexed array A, lying on the floor in a line. For each I (0 ≤ I < N), the length of rope I on the line is A[I].
	We say that two ropes I and I + 1 are adjacent. Two adjacent ropes can be tied together with a knot, and the length of the tied rope is the sum of lengths of both ropes. The resulting new rope can then be tied again.
	For a given integer K, the goal is to tie the ropes in such a way that the number of ropes whose length is greater than or equal to K is maximal.
	For example, consider K = 4 and array A such that:
	    A[0] = 1
	    A[1] = 2
	    A[2] = 3
	    A[3] = 4
	    A[4] = 1
	    A[5] = 1
	    A[6] = 3
	The ropes are shown in the figure below.
	
	We can tie:
	rope 1 with rope 2 to produce a rope of length A[1] + A[2] = 5;
	rope 4 with rope 5 with rope 6 to produce a rope of length A[4] + A[5] + A[6] = 5.
	After that, there will be three ropes whose lengths are greater than or equal to K = 4. It is not possible to produce four such ropes.
	Write a function:
	int solution(int K, int A[], int N);
	that, given an integer K and a non-empty zero-indexed array A of N integers, returns the maximum number of ropes of length greater than or equal to K that can be created.
	For example, given K = 4 and array A such that:
	    A[0] = 1
	    A[1] = 2
	    A[2] = 3
	    A[3] = 4
	    A[4] = 1
	    A[5] = 1
	    A[6] = 3
	the function should return 3, as explained above.
	Assume that:
	N is an integer within the range [1..100,000];
	K is an integer within the range [1..1,000,000,000];
	each element of array A is an integer within the range [1..1,000,000,000].
	Complexity:
	expected worst-case time complexity is O(N);
	expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//SCORE: 100/100
package greedyalgorithms;

public class TieRope {
	public static void main (String[] args) {
		int[] A = new int[]{1,2,3,4,1,1,3};
		int K = 4;
		System.out.println(solution(A, K));	
	}
	
	public static int solution(int[] A, int K) {
		int res=0;
		int tmp=0;
		for (int i = 0; i < A.length; i++) {
			tmp+=A[i];
			if (tmp>=K) {
				res++;
				tmp=0;
			}
		}
		return res;
	}
}
/*
	A zero-indexed array A consisting of N integers is given. A triplet (P, Q, R) is triangular if 0 ≤ P < Q < R < N and:
	A[P] + A[Q] > A[R],
	A[Q] + A[R] > A[P],
	A[R] + A[P] > A[Q].
	For example, consider array A such that:
	  A[0] = 10    A[1] = 2    A[2] = 5
	  A[3] = 1     A[4] = 8    A[5] = 20
	Triplet (0, 2, 4) is triangular.
	Write a function:
	class Solution { public int solution(int[] A); }
	that, given a zero-indexed array A consisting of N integers, returns 1 if there exists a triangular triplet for this array and returns 0 otherwise. For example, given array A such that:
	  A[0] = 10    A[1] = 2    A[2] = 5
	  A[3] = 1     A[4] = 8    A[5] = 20
	the function should return 1, as explained above. Given array A such that:
	  A[0] = 10    A[1] = 50    A[2] = 5
	  A[3] = 1
	the function should return 0.
	Assume that:
	N is an integer within the range [0..1,000,000];
	each element of array A is an integer within the range [−2,147,483,648..2,147,483,647].
	Complexity:
	expected worst-case time complexity is O(N*log(N));
	expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).
	Elements of input arrays can be modified.
 */

//SCORE: 100/100
package sorting;

import java.util.Arrays;

public class Triangle {
	public static void main (String[] args) {
		int[] A = new int[] {10,2,5,1,8,20};
		System.out.println(solution(A));
	}
	
	public static int solution(int[] A) {
		if (A.length < 3)
			return 0;
		Arrays.sort(A);
		for (int i = 2; i < A.length; i++) {
			if ((long)A[i-2] + (long)A[i-1] > (long)A[i])
				return 1;
		}
		return 0;
	}
}
